:mod:`fprime_gds.common.testing_fw.api`
=======================================

.. py:module:: fprime_gds.common.testing_fw.api

.. autoapi-nested-parse::

   gds_test_api.py:

   This file contains basic asserts that can support integration tests on an FPrime
   deployment. This API uses the standard pipeline to get access to commands, events,
   telemetry and dictionaries.

   :author: koran



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   fprime_gds.common.testing_fw.api.IntegrationTestAPI



.. py:class:: IntegrationTestAPI(pipeline, logpath=None, fsw_order=True)

   Bases: :class:`fprime_gds.common.handlers.DataHandler`

   A value used to begin searches after the current contents in a history and only search future
   items

   .. py:class:: __HistorySearcher

      This class defines the calls made by the __history_search helper method and has a unique
      implementation for each type of search provided by the api.

      .. method:: search_current_history(self, items)
         :abstractmethod:


         Searches the scoped existing history
         :returns: True if the search was satisfied, False otherwise


      .. method:: incremental_search(self, item)
         :abstractmethod:


         Searches one awaited item at a time
         :returns: True if the search was satisfied, False otherwise


      .. method:: get_return_value(self)


         Returns the result of the search whether the search is successful or not


      .. method:: requires_repeats(self)


         Returns a flag to determine if the history searcher needs repeated data objects when receive order does not match chronological order.



   .. attribute:: NOW
      :annotation: = NOW

      

   .. method:: teardown(self)


      To be called once at the end of the API's use. Closes the test log and clears histories.


   .. method:: start_test_case(self, case_name, case_id)


      To be called at the start of a test case. This function inserts a log message to denote a
      new test case is beginning, records the latest time stamp in case the user clears the
      aggregate histories, and then clears the API's histories.

      :param case_name: the name of the test case (str)
      :param case_id: a short identifier to denote the test case (str or number)


   .. method:: log(self, msg, color=None)


      User-accessible function to log user messages to the test log.
      :param msg: a user-provided message to add to the test log. (str)
      :param color: a string containing a color hex code "######" (str)


   .. method:: get_latest_time(self)


      Finds the latest flight software time received by either history.

      :returns: a flight software timestamp (TimeType)


   .. method:: test_assert(self, value, msg='', expect=False)


      this assert gives the user the ability to add formatted assert messages to the test log and
      raise an assertion.
      :param value: a boolean value that determines if the assert is successful.
      :param msg: a string describing what is checked by the assert.
      :param expect: when True, the call will behave as an expect, and will skip the assert (boolean)

      :returns: True if the assert was successful, False otherwise


   .. method:: predicate_assert(self, predicate, value, msg='', expect=False)


      API assert gives the user the ability to add formatted assert messages to the test log and
      raise an assertion.
      :param value: the value to be evaluated by the predicate. (object)
      :param predicate: an instance of predicate that will decided if the test passes (predicate)
      :param msg: a string describing what is checked by the assert. (str)
      :param expect: when True, the call will behave as an expect, and will skip the assert (boolean)

      :returns: True if the assert was successful, False otherwise


   .. method:: clear_histories(self, time_stamp=None)


      Clears the IntegrationTestAPI's histories. Because the command history is not correlated to
      a flight software timestamp, it will be cleared entirely. This function can be used to set
      up test cases so that the IntegrationTestAPI's histories only contain objects received
      during that test.
      Note: this will not clear user-created sub-histories nor the aggregate histories (histories
      owned by the GDS)

      :param time_stamp: If specified, histories are only cleared before the timestamp.


   .. method:: set_event_log_filter(self, event=None, args=None, severity=None, time_pred=None)


      Constructs an event predicate that is then used to filter which events are interlaced in the
      test logs. This method replaces the current filter. Calling this method with no arguments
      will effectively reset the filter.

      :param event: an optional mnemonic (str), id (int), or predicate to specify the event type
      :param args: an optional list of arguments (list of values, predicates, or None to ignore)
      :param severity: an EventSeverity enum or a predicate to specify the event severity
      :param time_pred: an optional predicate to specify the flight software timestamp


   .. method:: get_command_test_history(self)


      Accessor for IntegrationTestAPI's command history
      :returns: a history of CmdData objects


   .. method:: get_telemetry_test_history(self)


      Accessor for IntegrationTestAPI's telemetry history
      :returns: a history of ChData objects


   .. method:: get_event_test_history(self)


      Accessor for IntegrationTestAPI's event history
      :returns: a history of EventData objects


   .. method:: get_telemetry_subhistory(self, telemetry_filter=None, fsw_order=True)


      Returns a new instance of TestHistory that will be updated with new telemetry updates as
      they come in. Specifying a filter will only enqueue updates that satisfy the filter in this
      new sub-history. The returned history can be substituted into the await and assert methods
      of this API.

      :param telemetry_filter: an optional predicate used to filter a subhistory.
      :param fsw_order: a flag to determine whether this subhistory will maintain FSW time order.

      :returns: an instance of TestHistory


   .. method:: remove_telemetry_subhistory(self, subhist)


      De-registers the subhistory from the GDS. Once called, the given subhistory will stop
      receiving telemetry updates.

      :param subhist: a TestHistory instance that is subscribed to event messages

      :returns: True if the subhistory was removed, False otherwise


   .. method:: get_event_subhistory(self, event_filter=None, fsw_order=True)


      Returns a new instance of TestHistory that will be updated with new events as they come in.
      Specifying a filter will only enqueue events that satisfy the filter in this new
      sub-history. The returned history can be substituted into the await and assert methods of
      this API.

      :param event_filter: an optional predicate to filter a subhistory.
      :param fsw_order: a flag to determine whether this subhistory will maintain FSW time order.

      :returns: an instance of TestHistory


   .. method:: remove_event_subhistory(self, subhist)


      De-registers the subhistory from the GDS. Once called, the given subhistory will stop
      receiving event messages.

      :param subhist: a TestHistory instance that is subscribed to event messages

      :returns: True if the subhistory was removed, False otherwise


   .. method:: translate_command_name(self, command)


      This function will translate the given mnemonic into an ID as defined by the flight
      software dictionary. This call will raise an error if the command given is not in the
      dictionary.

      :param command: Either the command id (int) or the command mnemonic (str)

      :returns: The comand ID (int)


   .. method:: send_command(self, command, args=None)


      Sends the specified command.
      :param command: the mnemonic (str) or ID (int) of the command to send
      :param args: a list of command arguments.


   .. method:: send_and_await_telemetry(self, command, args=None, channels=None, timeout=5)


      Sends the specified command and awaits the specified channel update or sequence of
      updates. See await_telemetry and await_telemetry_sequence for full details.
      Note: If awaiting a sequence avoid specifying timestamps.

      :param command: the mnemonic (str) or ID (int) of the command to send
      :param args: a list of command arguments.
      :param channels: a single or a sequence of channel specs (event_predicates, mnemonics, or IDs)
      :param start: an optional index or predicate to specify the earliest item to search
      :param timeout: the number of seconds to wait before terminating the search (int)

      :returns: The channel update or updates found by the search


   .. method:: send_and_await_event(self, command, args=None, events=None, timeout=5)


      Sends the specified command and awaits the specified event message or sequence of
      messages. See await_event and await event sequence for full details.
      Note: If awaiting a sequence avoid specifying timestamps.

      :param command: the mnemonic (str) or ID (int) of the command to send
      :param args: a list of command arguments.
      :param events: a single or a sequence of event specifiers (event_predicates, mnemonics, or IDs)
      :param start: an optional index or predicate to specify the earliest item to search
      :param timeout: the number of seconds to wait before terminating the search (int)

      :returns: The event or events found by the search


   .. method:: send_and_assert_telemetry(self, command, args=None, channels=None, timeout=5)


      Sends the specified command and asserts on the specified channel update or sequence of
      updates. See await_telemetry and await_telemetry_sequence for full details.
      Note: If awaiting a sequence avoid specifying timestamps.

      :param command: the mnemonic (str) or ID (int) of the command to send
      :param args: a list of command arguments.
      :param channels: a single or a sequence of channel specs (event_predicates, mnemonics, or IDs)
      :param start: an optional index or predicate to specify the earliest item to search
      :param timeout: the number of seconds to wait before terminating the search (int)

      :returns: The channel update or updates found by the search


   .. method:: send_and_assert_event(self, command, args=None, events=None, timeout=5)


      Sends the specified command and asserts on the specified event message or sequence of
      messages. See assert_event and assert event sequence for full details.

      :param command: the mnemonic (str) or ID (int) of the command to send
      :param args: a list of command arguments.
      :param events: a single or a sequence of event specifiers (event_predicates, mnemonics, or IDs)
      :param start: an optional index or predicate to specify the earliest item to search
      :param timeout: the number of seconds to wait before terminating the search (int)

      :returns: The event or events found by the search


   .. method:: translate_telemetry_name(self, channel)


      This function will translate the given mnemonic into an ID as defined by the flight
      software dictionary. This call will raise an error if the channel given is not in the
      dictionary.

      :param channel: a channel mnemonic (str) or id (int)

      :returns: the channel ID (int)


   .. method:: get_telemetry_pred(self, channel=None, value=None, time_pred=None)


      This function will translate the channel ID, and construct a telemetry_predicate object. It
      is used as a helper by the IntegrationTestAPI, but could also be helpful to a user of the
      test API. If  channel is already an instance of telemetry_predicate, it will be returned
      immediately. The provided implementation of telemetry_predicate evaluates true if and only
      if all specified constraints are satisfied. If a specific constraint isn't specified, then
      it will not effect the outcome; this means all arguments are optional. If no constraints
      are specified, the predicate will always return true.


      :param channel: an optional mnemonic (str), id (int), or predicate to specify the channel type
      :param value: an optional value (object/number) or predicate to specify the value field
      :param time_pred: an optional predicate to specify the flight software timestamp

      :returns: an instance of telemetry_predicate


   .. method:: await_telemetry(self, channel, value=None, time_pred=None, history=None, start='NOW', timeout=5)


      A search for a single telemetry update received. By default, the call will only await
      until a correct update is found. The user can specify that await also searches the current
      history by specifying a value for start. On timeout, the search will return None.

      :param channel: a channel specifier (mnemonic, id, or predicate)
      :param value: optional value (object/number) or predicate to specify the value field
      :param time_pred: an optional predicate to specify the flight software timestamp
      :param history: if given, a substitute history that the function will search and await
      :param start: an optional index or predicate to specify the earliest item to search
      :param timeout: the number of seconds to wait before terminating the search (int)

      :returns: the ChData object found during the search, otherwise, None


   .. method:: await_telemetry_sequence(self, channels, history=None, start='NOW', timeout=5)


      A search for a sequence of telemetry updates. By default, the call will only await until
      the sequence is completed. The user can specify that await also searches the history by
      specifying a value for start. On timeout, the search will return the list of found
      channel updates regardless of whether the sequence is complete.
      Note: It is recommended (but not enforced) not to specify timestamps for this assert.
      Note: This function will always return a list of updates. The user should check if the
      sequence was completed.

      :param channels: an ordered list of channel specifiers (mnemonic, id, or predicate)
      :param history: if given, a substitute history that the function will search and await
      :param start: an optional index or predicate to specify the earliest item to search
      :param timeout: the number of seconds to wait before terminating the search (int)

      :returns: an ordered list of ChData objects that satisfies the sequence


   .. method:: await_telemetry_count(self, count, channels=None, history=None, start='NOW', timeout=5)


      A search on the number of telemetry updates received. By default, the call will only await
      until a correct count is achieved. The user can specify that await also searches the current
      history by specifying a value for start. On timeout, the search will return the list of
      found channel updates regardless of whether a correct count is achieved.
      Note: this search will always return a list of objects. The user should check if the search
      was completed.

      :param count: either an exact amount (int) or a predicate to specify how many objects to find
      :param channels: a channel specifier or list of channel specifiers (mnemonic, ID, or predicate)
      :param history: if given, a substitute history that the function will search and await
      :param start: an optional index or predicate to specify the earliest item to search
      :param timeout: the number of seconds to wait before terminating the search (int)

      :returns: a list of the ChData objects that were counted


   .. method:: assert_telemetry(self, channel, value=None, time_pred=None, history=None, start=None, timeout=0)


      An assert on a single telemetry update received. If the history doesn't have the
      correct update, the call will await until a correct update is received or the
      timeout, at which point it will assert failure.

      :param channel: a channel specifier (mnemonic, id, or predicate)
      :param value: optional value (object/number) or predicate to specify the value field
      :param time_pred: an optional predicate to specify the flight software timestamp
      :param history: if given, a substitute history that the function will search and await
      :param start: an optional index or predicate to specify the earliest item to search
      :param timeout: the number of seconds to wait before terminating the search (int)

      :returns: the ChData object found during the search


   .. method:: assert_telemetry_sequence(self, channels, history=None, start=None, timeout=0)


      A search for a sing sequence of telemetry updates messages. If the history doesn't have the
      complete sequence, the call will await until the sequence is completed or the timeout, at
      which point it will return the list of found channel updates.
      Note: It is recommended (but not enforced) not to specify timestamps for this assert.
      Note: This function will always return a list of updates the user should check if the
      sequence was completed.

      :param channels: an ordered list of channel specifiers (mnemonic, id, or predicate)
      :param history: if given, a substitute history that the function will search and await
      :param start: an optional index or predicate to specify the earliest item to search
      :param timeout: the number of seconds to wait before terminating the search (int)

      :returns: an ordered list of ChData objects that satisfies the sequence


   .. method:: assert_telemetry_count(self, count, channels=None, history=None, start=None, timeout=0)


      An assert on the number of channel updates received. If the history doesn't have the
      correct update count, the call will await until a correct count is achieved or the
      timeout, at which point it will assert failure.

      :param count: either an exact amount (int) or a predicate to specify how many objects to find
      :param channels: a channel specifier or list of channel specifiers (mnemonic, ID, or predicate)
      :param history: if given, a substitute history that the function will search and await
      :param start: an optional index or predicate to specify the earliest item to search
      :param timeout: the number of seconds to wait before terminating the search (int)

      :returns: a list of the ChData objects that were counted


   .. method:: translate_event_name(self, event)


      This function will translate the given mnemonic into an ID as defined by the
      flight software dictionary. This call will raise an error if the event given is
      not in the dictionary.

      :param event: an event mnemonic (str) or ID (int)

      :returns: the event ID (int)


   .. method:: get_event_pred(self, event=None, args=None, severity=None, time_pred=None)


      This function will translate the event ID, and construct an event_predicate object. It is
      used as a helper by the IntegrationTestAPI, but could also be helpful to a user of the test
      API. If event is already an instance of event_predicate, it will be returned immediately.
      The provided implementation of event_predicate evaluates true if and only if all specified
      constraints are satisfied. If a specific constraint isn't specified, then it will not
      effect the outcome; this means all arguments are optional. If no constraints are specified,
      the predicate will always return true.

      :param event: mnemonic (str), id (int), or predicate to specify the event type
      :param args: list of arguments (list of values, predicates, or None to ignore)
      :param severity: an EventSeverity enum or a predicate to specify the event severity
      :param time_pred: predicate to specify the flight software timestamp

      :returns: an instance of event_predicate


   .. method:: await_event(self, event, args=None, severity=None, time_pred=None, history=None, start='NOW', timeout=5)


      A search for a single event message received. By default, the call will only await until a
      correct message is found. The user can specify that await also searches the current history
      by specifying a value for start. On timeout, the search will return None.

      :param event: an event specifier (mnemonic, id, or predicate)
      :param args: a list of expected arguments (list of values, predicates, or None for don't care)
      :param severity: an EventSeverity enum or a predicate to specify the event severity
      :param time_pred: an optional predicate to specify the flight software timestamp
      :param history: if given, a substitute history that the function will search and await
      :param start: an optional index or predicate to specify the earliest item to search
      :param timeout: the number of seconds to wait before terminating the search (int)

      :returns: the EventData object found during the search, otherwise, None


   .. method:: await_event_sequence(self, events, history=None, start='NOW', timeout=5)


      A search for a sequence of event messages. By default, the call will only await until
      the sequence is completed. The user can specify that await also searches the history by
      specifying a value for start. On timeout, the search will return the list of found
      event messages regardless of whether the sequence is complete.
      Note: It is recommended (but not enforced) not to specify timestamps for this assert.
      Note: This function will always return a list of events the user should check if the
      sequence was completed.

      :param events: an ordered list of event specifiers (mnemonic, id, or predicate)
      :param history: if given, a substitute history that the function will search and await
      :param start: an optional index or predicate to specify the earliest item to search
      :param timeout: the number of seconds to wait before terminating the search (int)

      :returns: an ordered list of EventData objects that satisfies the sequence


   .. method:: await_event_count(self, count, events=None, history=None, start='NOW', timeout=5)


      A search on the number of events received. By default, the call will only await until a
      correct count is achieved. The user can specify that this await also searches the current
      history by specifying a value for start. On timeout, the search will return the list of
      found event messages regardless of whether a correct count is achieved.
      Note: this search will always return a list of objects. The user should check if the search
      was completed.

      :param count: either an exact amount (int) or a predicate to specify how many objects to find
      :param events: an event specifier or list of event specifiers (mnemonic, ID, or predicate)
      :param history: if given, a substitute history that the function will search and await
      :param start: an optional index or predicate to specify the earliest item to search
      :param timeout: the number of seconds to wait before terminating the search (int)

      :returns: a list of the EventData objects that were counted


   .. method:: assert_event(self, event, args=None, severity=None, time_pred=None, history=None, start=None, timeout=0)


      An assert on a single event message received. If the history doesn't have the
      correct message, the call will await until a correct message is received or the
      timeout, at which point it will assert failure.

      :param event: an event specifier (mnemonic, id, or predicate)
      :param args: a list of expected arguments (list of values, predicates, or None for don't care)
      :param severity: an EventSeverity enum or a predicate to specify the event severity
      :param time_pred: an optional predicate to specify the flight software timestamp
      :param history: if given, a substitute history that the function will search and await
      :param start: an optional index or predicate to specify the earliest item to search
      :param timeout: the number of seconds to wait before terminating the search (int)

      :returns: the EventData object found during the search


   .. method:: assert_event_sequence(self, events, history=None, start=None, timeout=0)


      An assert that a sequence of event messages is received. If the history doesn't have the
      complete sequence, the call will await until the sequence is completed or the timeout, at
      which point it will assert failure.
      Note: It is recommended (but not enforced) not to specify timestamps for this assert.

      :param events: an ordered list of event specifiers (mnemonic, id, or predicate)
      :param history: if given, a substitute history that the function will search and await
      :param start: an optional index or predicate to specify the earliest item to search
      :param timeout: the number of seconds to wait before terminating the search (int)

      :returns: an ordered list of EventData objects that satisfied the sequence


   .. method:: assert_event_count(self, count, events=None, history=None, start=None, timeout=0)


      An assert on the number of events received. If the history doesn't have the
      correct event count, the call will await until a correct count is achieved or the
      timeout, at which point it will assert failure.

      :param count: either an exact amount (int) or a predicate to specify how many objects to find
      :param events: optional event specifier or list of specifiers (mnemonic, id, or predicate)
      :param history: if given, a substitute history that the function will search and await
      :param start: an optional index or predicate to specify the earliest item to search
      :param timeout: the number of seconds to wait before terminating the search (int)

      :returns: a list of the EventData objects that were counted


   .. method:: __timeout_sig_handler(self, signum, frame)



   .. method:: __search_test_history(self, searcher, name, history, start=None, timeout=0)


      This helper method contains the common logic to all search methods in the test API. This
      means searches on both the event and channel histories rely on this helper. Each history
      search is performed on both current history items and then on items that have yet to be
      added to the history. The API defines these two scopes using the variables start and
      timeout. They have several useful behaviors.

      start is used to pick the earliest item to search in the current history. start can be
      specified as either a predicate to search for the first item, an index of the history, the
      API variable NOW, or an instance of the TimeType timestamp object. The behavior of NOW is
      to ignore the current history and only search awaited items until the timestamp. The
      behavior of giving a timetype is to only search items that happened at or after the
      specified timestamp.

      timeout is a specification of how long to await future items in seconds. Specifying a
      timeout of 0 will ignore all future items. The timeout specifies an increment of time
      relative to the local clock, not the embedded application's clock.
      Note: the API does not try to check for edge cases where the final item in a search is
      received as the search times out. The user should ensure that their timeouts are sufficient
      to complete any awaiting searches.

      Finally, the test API supports the ability to substitute a history object for any search.
      This is part of why history must be specified for each search

      :param searcher: an instance of __HistorySearcher to execute search-specific logic
      :param name: a string name to differentiate the type of search
      :param history: the TestHistory object to conduct the search on
      :param start: an index, a predicate, the NOW variable, or a TimeType timestamp to pick the
                    first item to search
      :param timeout: the number of seconds to await future items


   .. method:: find_history_item(self, search_pred, history, start=None, timeout=0)


      This function can both search and await for an element in a history. The function will
      return the first valid object it finds. The search will return when an object is found, or
      the timeout is reached.

      :param search_pred: a predicate to specify a history item.
      :param history: the history that the function will search and await
      :param start: an index or predicate to specify the earliest item from the history to search
      :param timeout: the number of seconds to wait before terminating the search (int)

      :returns: the data object found during the search, otherwise, None


   .. method:: find_history_sequence(self, seq_preds, history, start=None, timeout=0)


      This function can both search and await for a sequence of elements in a history. The
      function will return a list of the history objects to satisfy the sequence search. The
      search will return when an order of data objects is found that satisfies the entire
      sequence, or the timeout occurs.
      Note: this search will always return a list of objects. The user should check if the search
      was completed.

      :param seq_preds: an ordered list of predicate objects to specify a sequence
      :param history: the history that the function will search and await
      :param start: an index or predicate to specify the earliest item from the history to search
      :param timeout: the number of seconds to wait before terminating the search (int)

      :returns: a list of data objects that satisfied the sequence


   .. method:: find_history_count(self, count, history, search_pred=None, start=None, timeout=0)


      This function first counts all valid items in the current history, then can await until a
      valid number of elements is received by the history. The function will return a list of the
      history objects counted by the search. The search will return when a correct count of data
      objects is found, or the timeout occurs.
      Note: this search will always return a list of objects. The user should check if the search
      was completed.

      :param count: either an exact amount (int) or a predicate to specify how many objects to find
      :param history: the history that the function will search and await
      :param search_pred: a predicate to specify which items to count. If left blank, all will count
      :param start: an index or predicate to specify the earliest item from the history to search
      :param timeout: the number of seconds to wait before terminating the search (int)

      :returns: a list of data objects that were counted during the search


   .. method:: __log(self, message, color=None, style=None, sender='Test API', case_id=None)


      Logs and prints an API Message. If the API isn't using a Logger, then only a message will
      be printed.
      :param message: a string containing the message to log
      :param color: a color hex code (str)
      :param style: a style option from test logger (str) ["BOLD", "ITALICS", "UNDERLINED"]
      :param sender: a marker for where the message originated
      :param case_id: a tag for the current test case. Only needs to be set when a new case starts


   .. method:: __assert_pred(self, name, predicate, value, msg='', expect=False)


      Helper to assert that a value satisfies a predicate. Includes arguments to provide more
      descriptive messages in the logs.
      :param name: short name describing the check
      :param predicate: an instance of predicate to determine if the assert is successful
      :param value: the object evaluated by the predicate
      :param msg: a string message to describe what the assert is checking
      :param expect: a boolean value: True will be have as an expect and not raise an assertion.

      :returns: True if the assertion was successful, False otherwise


   .. method:: data_callback(self, data, sender=None)


      Data callback used by the api to log events and detect when they are received out of order.
      :param data: object to store



