# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master, devel ]
  pull_request:
    branches: [ master, devel, release/v3.0.0 ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  Framework:
    runs-on: ubuntu-latest
    steps:
    - name: "Checkout F´ Repository"
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - uses: ./.github/actions/setup
    - name: F prime CI step
      run: ./ci/tests/Framework.bash
    # Archive the outputs
    - name: 'Archive Logs'
      uses: actions/upload-artifact@v2
      if: always()
      with:
        name: ci-framework-logs
        path: ci-logs.tar.gz
        retention-days: 5

  Ref:
    runs-on: ubuntu-latest
    steps:
    - name: "Checkout F´ Repository"
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - uses: ./.github/actions/setup
    - name: F prime CI step
      run: ./ci/tests/Ref.bash
    # Archive the outputs
    - name: 'Archive Logs'
      uses: actions/upload-artifact@v2
      if: always()
      with:
        name: ci-ref-logs
        path: ci-logs.tar.gz
        retention-days: 5

  Integration:
    runs-on: ubuntu-latest
    steps:
    - name: "Checkout F´ Repository"
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - uses: ./.github/actions/setup
    - name: Setup Valgrind
      run: |
           sudo apt-get update
           sudo apt-get install valgrind
    - name: F prime CI step
      run: ./ci/tests/30-ints.bash
    # Archive the outputs
    - name: 'Archive Logs'
      uses: actions/upload-artifact@v2
      if: always()
      with:
        name: ci-int-logs
        path: ci-logs.tar.gz
        retention-days: 5

  Quality:
    runs-on: ubuntu-latest
    steps:
    - name: "Checkout F´ Repository"
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - uses: ./.github/actions/setup
    - name: Setup Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install clang-tidy-12
    - name: General Static Analysis
      run: |
        fprime-util generate --ut -DCMAKE_C_COMPILER=gcc-10 -DCMAKE_CXX_COMPILER=g++-10 -DCMAKE_CXX_CLANG_TIDY=clang-tidy-12
        fprime-util build --all --ut
    - name: Flight Code Static Analysis
      run: |
        fprime-util generate -DCMAKE_C_COMPILER=gcc-10 -DCMAKE_CXX_COMPILER=g++-10 -DCMAKE_CXX_CLANG_TIDY="clang-tidy-12;--config-file=$PWD/release.clang-tidy"
        fprime-util build --all -j4


  CMake:
    runs-on: ubuntu-latest
    steps:
    - name: "Checkout F´ Repository"
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - uses: ./.github/actions/setup
    - name: CMake Tests
      working-directory: ./cmake/test
      run: pytest
