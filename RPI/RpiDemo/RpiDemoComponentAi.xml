<?xml version="1.0" encoding="UTF-8"?>

<!-- Note: sync attribute can be sync, async, or guarded. Only for input />
   Note: priority attribute can be high, medium, low or interrupt. 
         Only valid for active components input.
   Note  kind attribute of component can be ether active or passive.
         -->
<?xml-model href="../../schema/ISF/component_schema.rng" type="application/xml" schematypens="http://relaxng.org/ns/structure/1.0"?>
<component name="RpiDemo" kind="active" namespace="Rpi">
    <import_port_type>Drv/SpiDriverPorts/SpiReadWritePortAi.xml</import_port_type>
    <import_port_type>Drv/SerialDriverPorts/SerialReadPortAi.xml</import_port_type>
    <import_port_type>Drv/SerialDriverPorts/SerialWritePortAi.xml</import_port_type>
    <import_port_type>Fw/Buffer/BufferSendPortAi.xml</import_port_type>
    <import_port_type>Drv/GpioDriverPorts/GpioReadPortAi.xml</import_port_type>
    <import_port_type>Drv/GpioDriverPorts/GpioWritePortAi.xml</import_port_type>
    <import_port_type>Svc/Sched/SchedPortAi.xml</import_port_type>
    <comment>An RPI demonstrator component</comment>
    <ports>
        <port name="Run" data_type="Svc::Sched" kind="async_input">
            <comment>
            Input Scheduler port - called at 1Hz and 10Hz
            </comment>
        </port>
        <port name="GpioWrite" data_type="Drv::GpioWrite" kind="output"  max_number="3">
            <comment>
            Output Port for writing GPIO values
            </comment>
        </port>
        <port name="GpioRead" data_type="Drv::GpioRead" kind="output"  max_number="2">
            <comment>
            Output Port for reading GPIO values
            </comment>
        </port>
        <port name="SpiReadWrite" data_type="Drv::SpiReadWrite" kind="output">
            <comment>
            Output Port for reading/writing SPI
            </comment>
        </port>
        <port name="UartWrite" data_type="Drv::SerialWrite" kind="output">
            <comment>
            Output Port for writing UART data
            </comment>
        </port>
        <port name="UartRead" data_type="Drv::SerialRead" kind="async_input">
            <comment>
            Input port for receiving UART data
            </comment>
        </port>
        <port name="UartBuffers" data_type="Fw::BufferSend"  kind="output"    max_number="1">
            <comment>
            Output port for sending UART buffers to use for reading
            </comment>
        </port>

    </ports>
    <commands>
        <!-- Command to send a string message -->
        <command kind="async" opcode="0" mnemonic="RD_SendString">
            <comment>
            Command to send a string to the UART
            </comment>
            <args>
                <arg name="text" type="string" size="40">
                    <comment>String to send</comment>
                </arg>          
             </args>
        </command>
        <command kind="async" opcode="1" mnemonic="RD_SetLed" >
            <comment>
            Sets LED state
            </comment>
            <args>
                <arg name="value" type="ENUM">
                    <enum name="LedState">
                        <item name="LED_STATE_BLINKING"/>
                        <item name="LED_STATE_OFF"/>
                    </enum>
                    <comment>GPIO value</comment>
                </arg>
             </args>
        </command>
        <command kind="async" opcode="2" mnemonic="RD_SetLedDivider" >
            <comment>
            Sets the divided rate of the LED
            </comment>
            <args>
                <arg name="divider" type="U32">
                    <comment>Divide 10Hz by this number</comment>
                </arg>          
             </args>
        </command>
        <command kind="async" opcode="3" mnemonic="RD_SetGpio" >
            <comment>
            Sets a GPIO port value
            </comment>
            <args>
                <arg name="output" type="ENUM">
                    <enum name="GpioOutNum">
                        <item name="GPIO_OUT_23"/>
                        <item name="GPIO_OUT_24"/>
                    </enum>
                    <comment>Output GPIO</comment>
                </arg>          
                <arg name="value" type="ENUM">
                    <enum name="GpioOutVal">
                        <item name="GPIO_OUT_CLEAR"/>
                        <item name="GPIO_OUT_SET"/>
                    </enum>
                    <comment>GPIO value</comment>
                </arg>
             </args>
        </command>
        <command kind="async" opcode="4" mnemonic="RD_GetGpio" >
            <comment>
            Gets a GPIO port value
            </comment>
            <args>
                <arg name="input" type="ENUM">
                    <enum name="GpioInNum">
                        <item name="GPIO_IN_25"/>
                        <item name="GPIO_IN_17"/>
                    </enum>
                    <comment>Input GPIO</comment>
                </arg>          
             </args>
        </command>        
        <command kind="async" opcode="5" mnemonic="RD_SendSpi" >
            <comment>
            Sends SPI data, prints read data
            </comment>
            <args>
                <arg name="data" type="string" size="40">
                    <comment>data to send</comment>
                </arg>          
             </args>
        </command>
    </commands>
    <telemetry>
        <channel id="0" name="RD_UartSentBytes" data_type="U32">
            <comment>
            Number of bytes sent on the UART
            </comment>
        </channel>
        <channel id="1" name="RD_UartRecvBytes" data_type="U32">
            <comment>
            Number of bytes sent on the UART
            </comment>
        </channel>
        <channel id="2" name="RD_LastMsg" data_type="string" size="40">
            <comment>
            Last received UART text message
            </comment>
        </channel>
        <channel id="3" name="RD_SpiBytes" data_type="U32">
            <comment>
            Number of bytes sent on SPI
            </comment>
        </channel>
        <channel id="4" name="RD_1HzTicks" data_type="U32">
            <comment>
            Ticks at 1Hz
            </comment>
        </channel>
        <channel id="5" name="RD_10HzTicks" data_type="U32">
            <comment>
            Ticks at 10Hz
            </comment>
        </channel>
    </telemetry>
    <events>
        <event id="0" name="RD_UartMsgOut" severity="ACTIVITY_HI" format_string = "Sent msg %s on UART"  >
            <comment>
            Message sent on UART
            </comment>
            <args>
                <arg name="msg" type="string" size="40">
                    <comment>The message</comment>
                </arg>          
            </args>
        </event>
        <event id="1" name="RD_UartMsgIn" severity="ACTIVITY_HI" format_string = "Received msg %s on UART"  >
            <comment>
            Message received on UART
            </comment>
            <args>
                <arg name="msg" type="string" size="40">
                    <comment>The message</comment>
                </arg>          
            </args>
        </event>
        <event id="2" name="RD_GpioSetVal" severity="ACTIVITY_HI" format_string = "GPIO %d set to %d" >
            <comment>
            GPIO set
            </comment>
            <args>
                <arg name="output" type="U32">
                    <comment>The output number</comment>
                </arg>          
                <arg name="value" type="ENUM">
                    <enum name="GpioOutValEv">
                        <item name="GPIO_OUT_CLEAR_EV"/>
                        <item name="GPIO_OUT_SET_EV"/>
                    </enum>
                    <comment>GPIO value</comment>
                </arg>
            </args>
        </event>
        <event id="3" name="RD_GpioGetVal" severity="ACTIVITY_HI" format_string = "GPIO %d read as %d" >
            <comment>
            GPIO get
            </comment>
            <args>
                <arg name="output" type="U32">
                    <comment>The output number</comment>
                </arg>          
                <arg name="value" type="ENUM">
                    <enum name="GpioInValEv">
                        <item name="GPIO_IN_CLEAR_EV"/>
                        <item name="GPIO_IN_SET_EV"/>
                    </enum>
                    <comment>GPIO value</comment>
                </arg>
            </args>
        </event>
        <event id="4" name="RD_SpiMsgIn" severity="ACTIVITY_HI" format_string = "Received msg %s on SPI"  >
            <comment>
            Message received on SPI
            </comment>
            <args>
                <arg name="msg" type="string" size="40">
                    <comment>The message bytes as text</comment>
                </arg>          
            </args>
        </event>
        <event id="5" name="RD_InvalidGpio" severity="WARNING_HI" format_string = "Invalid GPIO %d requested"  >
            <comment>
            Invalid GPIO requested
            </comment>
            <args>
                <arg name="val" type="U32">
                    <comment>The bad GPIO number</comment>
                </arg>          
            </args>
        </event>
        <event id="6" name="RD_InvalidDivider" severity="WARNING_HI" format_string = "Invalid divider %d requested"  >
            <comment>
            Message received on UART
            </comment>
            <args>
                <arg name="val" type="U32">
                    <comment>The bad divider value</comment>
                </arg>          
            </args>
        </event>
        <event id="7" name="RD_LedBlinkState" severity="ACTIVITY_HI" format_string = "LED blink state set to %d"  >
            <comment>
            Blink state set to new value
            </comment>
            <args>
                <arg name="val" type="ENUM">
		            <enum name="LedStatePrmEv">
		                <item name="LED_STATE_BLINKING_EV"/>
		                <item name="LED_STATE_OFF_EV"/>
		            </enum>
                    <comment>The blink state</comment>
                </arg>          
            </args>
        </event>
    </events>
    <parameters>
        <parameter id="0" name="RD_PrmLedInitState" data_type="ENUM" default="LED_STATE_BLINKING_PRM" set_opcode="10" save_opcode="11">
            <enum name="LedStatePrm">
                <item name="LED_STATE_BLINKING_PRM"/>
                <item name="LED_STATE_OFF_PRM"/>
            </enum>
            <comment>
            Parameter to determine initial state of blinking LED
            </comment>
        </parameter>
    </parameters>
</component>

