// ======================================================================
// \title  SeqDispatcherTesterHelpers.cpp
// \author Generated by fpp-to-cpp
// \brief  cpp file for SeqDispatcher component test harness helper functions
// ======================================================================

#include "SeqDispatcherTester.hpp"

namespace Svc {

// ----------------------------------------------------------------------
// Helper functions
// ----------------------------------------------------------------------

void Tester ::connectPorts() {
    // Connect special input ports

    this->connect_to_cmdIn(0, this->component.get_cmdIn_InputPort(0));

    // Connect special output ports

    this->component.set_cmdRegOut_OutputPort(0, this->get_from_cmdRegOut(0));

    this->component.set_cmdResponseOut_OutputPort(0, this->get_from_cmdResponseOut(0));

    this->component.set_logOut_OutputPort(0, this->get_from_logOut(0));

    this->component.set_logTextOut_OutputPort(0, this->get_from_logTextOut(0));

    this->component.set_timeCaller_OutputPort(0, this->get_from_timeCaller(0));

    this->component.set_tlmOut_OutputPort(0, this->get_from_tlmOut(0));

    // Connect typed input ports

    for (FwIndexType i = 0; i < 2; i++) {
        this->connect_to_seqDoneIn(i, this->component.get_seqDoneIn_InputPort(i));
    }

    this->connect_to_seqRunIn(0, this->component.get_seqRunIn_InputPort(0));

    for (FwIndexType i = 0; i < 2; i++) {
        this->connect_to_seqStartIn(i, this->component.get_seqStartIn_InputPort(i));
    }

    // Connect typed output ports

    for (FwIndexType i = 0; i < 2; i++) {
        this->component.set_seqRunOut_OutputPort(i, this->get_from_seqRunOut(i));
    }
}

void Tester ::initComponents() {
    this->init();
    this->component.init(Tester ::TEST_INSTANCE_QUEUE_DEPTH,Tester ::TEST_INSTANCE_ID);
}

}  // namespace Svc
