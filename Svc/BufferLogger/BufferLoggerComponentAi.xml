<?xml version="1.0" encoding="UTF-8"?>

<!-- =====================================================================
BufferLoggerComponentAi.xml
Generated by fpp-to-xml
====================================================================== -->
<component namespace="Svc" name="BufferLogger" kind="active">

  <import_enum_type>Svc/BufferLogger/BufferLogger_LogStateEnumAi.xml</import_enum_type>
  <import_port_type>Fw/Buffer/BufferSendPortAi.xml</import_port_type>
  <import_port_type>Fw/Cmd/CmdPortAi.xml</import_port_type>
  <import_port_type>Fw/Cmd/CmdRegPortAi.xml</import_port_type>
  <import_port_type>Fw/Cmd/CmdResponsePortAi.xml</import_port_type>
  <import_port_type>Fw/Com/ComPortAi.xml</import_port_type>
  <import_port_type>Fw/Log/LogPortAi.xml</import_port_type>
  <import_port_type>Fw/Log/LogTextPortAi.xml</import_port_type>
  <import_port_type>Fw/Time/TimePortAi.xml</import_port_type>
  <import_port_type>Fw/Tlm/TlmPortAi.xml</import_port_type>
  <import_port_type>Svc/Ping/PingPortAi.xml</import_port_type>
  <import_port_type>Svc/Sched/SchedPortAi.xml</import_port_type>

  <ports>
    <port name="bufferSendIn" data_type="Fw::BufferSend" kind="async_input" max_number="1" full="assert">
      <comment>
      Buffer input port
      </comment>
    </port>
    <port name="bufferSendOut" data_type="Fw::BufferSend" kind="output" max_number="1">
      <comment>
      Buffer output port
      </comment>
    </port>
    <port name="cmdIn" data_type="Fw::Cmd" kind="input" role="Cmd" max_number="1">
      <comment>
      Port for receiving commands
      </comment>
    </port>
    <port name="cmdRegOut" data_type="Fw::CmdReg" kind="output" role="CmdRegistration" max_number="1">
      <comment>
      Port for sending command registration requests
      </comment>
    </port>
    <port name="cmdResponseOut" data_type="Fw::CmdResponse" kind="output" role="CmdResponse" max_number="1">
      <comment>
      Port for sending command response
      </comment>
    </port>
    <port name="comIn" data_type="Fw::Com" kind="async_input" max_number="1" full="assert">
      <comment>
      Packet input port
      </comment>
    </port>
    <port name="eventOut" data_type="Fw::Log" kind="output" role="LogEvent" max_number="1">
      <comment>
      Port for emitting events
      </comment>
    </port>
    <port name="eventOutText" data_type="Fw::LogText" kind="output" role="LogTextEvent" max_number="1">
      <comment>
      Port for emitting text events
      </comment>
    </port>
    <port name="pingIn" data_type="Svc::Ping" kind="async_input" max_number="1" full="assert">
      <comment>
      Ping input port
      </comment>
    </port>
    <port name="pingOut" data_type="Svc::Ping" kind="output" max_number="1">
      <comment>
      Ping output port
      </comment>
    </port>
    <port name="schedIn" data_type="Svc::Sched" kind="async_input" max_number="1" full="assert"/>
    <port name="timeCaller" data_type="Fw::Time" kind="output" role="TimeGet" max_number="1">
      <comment>
      Port for getting the time
      </comment>
    </port>
    <port name="tlmOut" data_type="Fw::Tlm" kind="output" role="Telemetry" max_number="1">
      <comment>
      Port for emitting telemetry
      </comment>
    </port>
  </ports>

  <commands>
    <command kind="async" opcode="0x0" mnemonic="BL_OpenFile" full="assert">
      <comment>
      Open a new log file with specified name; also resets unique file counter to 0
      </comment>
      <args>
        <arg name="file" type="string" size="40"/>
      </args>
    </command>
    <command kind="async" opcode="0x1" mnemonic="BL_CloseFile" full="assert">
      <comment>
      Close the currently open log file, if any
      </comment>
    </command>
    <command kind="async" opcode="0x2" mnemonic="BL_SetLogging" full="assert">
      <comment>
      Sets the volatile logging state
      </comment>
      <args>
        <arg name="state" type="Svc::BufferLogger_LogState"/>
      </args>
    </command>
    <command kind="async" opcode="0x3" mnemonic="BL_FlushFile" full="assert">
      <comment>
      Flushes the current open log file to disk; a no-op with fprime's unbuffered file I/O, so always returns success
      </comment>
    </command>
  </commands>

  <events>
    <event id="0x0" name="BL_LogFileClosed" severity="DIAGNOSTIC" format_string="File %s closed">
      <comment>
      The Buffer Logger closed a log file
      </comment>
      <args>
        <arg name="file" type="string" size="256">
          <comment>
          The file
          </comment>
        </arg>
      </args>
    </event>
    <event id="0x1" name="BL_LogFileOpenError" severity="WARNING_HI" format_string="Error %u opening file %s">
      <comment>
      The Buffer Logger encountered an error opening a log file
      </comment>
      <args>
        <arg name="errornum" type="U32">
          <comment>
          The error number returned from the open operation
          </comment>
        </arg>
        <arg name="file" type="string" size="256">
          <comment>
          The file
          </comment>
        </arg>
      </args>
    </event>
    <event id="0x2" name="BL_LogFileValidationError" severity="WARNING_HI" format_string="Failed creating validation file %s with status %u">
      <comment>
      The Buffer Logger encountered an error writing a validation file
      </comment>
      <args>
        <arg name="validationFile" type="string" size="256">
          <comment>
          The validation file
          </comment>
        </arg>
        <arg name="status" type="U32">
          <comment>
          The Os::Validate::Status return
          </comment>
        </arg>
      </args>
    </event>
    <event id="0x3" name="BL_LogFileWriteError" severity="WARNING_HI" format_string="Error %u while writing %u of %u bytes to %s">
      <comment>
      The Buffer Logger encountered an error writing to a log file
      </comment>
      <args>
        <arg name="errornum" type="U32">
          <comment>
          The error number returned from the write operation
          </comment>
        </arg>
        <arg name="bytesWritten" type="U32">
          <comment>
          The number of bytes successfully written
          </comment>
        </arg>
        <arg name="bytesToWrite" type="U32">
          <comment>
          The number of bytes attempted
          </comment>
        </arg>
        <arg name="file" type="string" size="256">
          <comment>
          The file
          </comment>
        </arg>
      </args>
    </event>
    <event id="0x4" name="BL_Activated" severity="ACTIVITY_LO" format_string="Buffer logger was activated">
      <comment>
      Buffer logger was activated
      </comment>
    </event>
    <event id="0x5" name="BL_Deactivated" severity="ACTIVITY_LO" format_string="Buffer logger was deactivated">
      <comment>
      Buffer logger was deactivated
      </comment>
    </event>
    <event id="0x6" name="BL_NoLogFileOpenInitError" severity="WARNING_HI" format_string="No log file open command">
      <comment>
      No log file open command was received by BufferLogger
      </comment>
    </event>
  </events>

  <telemetry>
    <channel id="0x0" name="BufferLogger_NumLoggedBuffers" data_type="U32" update="always">
      <comment>
      The number of buffers logged
      </comment>
    </channel>
  </telemetry>

</component>
