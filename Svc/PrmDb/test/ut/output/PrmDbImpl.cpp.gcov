        -:    0:Source:/home/tcanham/source/isf/Svc/PrmDb/PrmDbImpl.cpp
        -:    0:Programs:13
        -:    1:/*
        -:    2: * PrmDbImpl.cpp
        -:    3: *
        -:    4: *  Created on: March 9, 2015
        -:    5: *      Author: Timothy Canham
        -:    6: */
        -:    7:
        -:    8:#include <Svc/PrmDb/PrmDbImpl.hpp>
        -:    9:#include <Fw/Types/Assert.hpp>
        -:   10:#include <Fw/Types/EightyCharString.hpp>
        -:   11:
        -:   12:#include <Os/File.hpp>
        -:   13:
        -:   14:#include <cstring>
        -:   15:#include <stdio.h>
        -:   16:
        -:   17:namespace Svc {
        -:   18:
        -:   19:    // anonymous namespace for buffer declaration
        -:   20:    namespace {
       42:   21:        class WorkingBuffer : public Fw::SerializeBufferBase {
        -:   22:            public:
        -:   23:
       25:   24:                NATIVE_UINT_TYPE getBuffCapacity(void) const {
       25:   25:                    return sizeof(m_buff);
        -:   26:                }
        -:   27:
      154:   28:                U8* getBuffAddr(void) {
      154:   29:                    return m_buff;
        -:   30:                }
        -:   31:
    #####:   32:                const U8* getBuffAddr(void) const {
    #####:   33:                    return m_buff;
        -:   34:                }
        -:   35:
        -:   36:            private:
        -:   37:                // Set to max of parameter buffer + id
        -:   38:                U8 m_buff[FW_PARAM_BUFFER_MAX_SIZE + sizeof(FwPrmIdType)];
        -:   39:        };
        -:   40:    }
        -:   41:
        -:   42:
        -:   43:#if FW_OBJECT_NAMES == 1
        6:   44:    PrmDbImpl::PrmDbImpl(const char* name, const char* file) : PrmDbComponentBase(name) {
        -:   45:#else
        -:   46:    PrmDbImpl::PrmDbImpl(const char* file) {
        -:   47:#endif
        6:   48:        this->clearDb();
        6:   49:        this->m_fileName = file;
        6:   50:    }
        -:   51:
        6:   52:    void PrmDbImpl::init(NATIVE_INT_TYPE queueDepth, NATIVE_INT_TYPE instance) {
        6:   53:        PrmDbComponentBase::init(queueDepth,instance);
        6:   54:    }
        -:   55:
       23:   56:    void PrmDbImpl::clearDb(void) {
      598:   57:        for (I32 entry = 0; entry < PRMDB_NUM_DB_ENTRIES; entry++) {
      575:   58:            this->m_db[entry].used = false;
      575:   59:            this->m_db[entry].id = 0;
        -:   60:        }
       23:   61:    }
        -:   62:
        -:   63:    // If ports are no longer guarded, these accesses need to be protected from each other
        -:   64:    // If there are a lot of accesses, perhaps an interrupt lock could be used instead of guarded ports
        -:   65:
       13:   66:    Fw::ParamValid PrmDbImpl::getPrm_handler(NATIVE_INT_TYPE portNum, FwPrmIdType id, Fw::ParamBuffer &val) {
        -:   67:        // search for entry
       13:   68:        Fw::ParamValid stat = Fw::PARAM_INVALID;
        -:   69:
       39:   70:        for (I32 entry = 0; entry < PRMDB_NUM_DB_ENTRIES; entry++) {
       38:   71:            if (this->m_db[entry].used) {
       15:   72:                if (this->m_db[entry].id == id) {
       12:   73:                    val = this->m_db[entry].val;
       12:   74:                    stat = Fw::PARAM_VALID;
       12:   75:                    break;
        -:   76:                }
        -:   77:            }
        -:   78:        }
        -:   79:
        -:   80:        // if unable to find parameter, send error message
       13:   81:        if (Fw::PARAM_INVALID == stat) {
        1:   82:            this->log_WARNING_LO_PrmIdNotFound(id);
        -:   83:        }
        -:   84:
       13:   85:        return stat;
        -:   86:    }
        -:   87:
       41:   88:    void PrmDbImpl::setPrm_handler(NATIVE_INT_TYPE portNum, FwPrmIdType id, Fw::ParamBuffer &val) {
        -:   89:
       41:   90:        this->lock();
        -:   91:
        -:   92:        // search for existing entry
        -:   93:
       41:   94:        bool existingEntry = false;
       41:   95:        bool noSlots = true;
        -:   96:
      941:   97:        for (NATIVE_INT_TYPE entry = 0; entry < PRMDB_NUM_DB_ENTRIES; entry++) {
      905:   98:            if ((this->m_db[entry].used) && (id == this->m_db[entry].id)) {
        5:   99:                this->m_db[entry].val = val;
        5:  100:                existingEntry = true;
        5:  101:                break;
        -:  102:            }
        -:  103:        }
        -:  104:
        -:  105:        // if there is no existing entry, add one
       41:  106:        if (!existingEntry) {
      366:  107:            for (I32 entry = 0; entry < PRMDB_NUM_DB_ENTRIES; entry++) {
      365:  108:                if (!(this->m_db[entry].used)) {
       35:  109:                    this->m_db[entry].val = val;
       35:  110:                    this->m_db[entry].id = id;
       35:  111:                    this->m_db[entry].used = true;
       35:  112:                    noSlots = false;
       35:  113:                    break;
        -:  114:                }
        -:  115:            }
        -:  116:        }
        -:  117:
       41:  118:        this->unLock();
        -:  119:
       41:  120:        if (existingEntry) {
        5:  121:            this->log_ACTIVITY_HI_PrmIdUpdated(id);
       36:  122:        } else if (noSlots) {
        1:  123:            this->log_FATAL_PrmDbFull(id);
        -:  124:        } else {
       35:  125:            this->log_ACTIVITY_HI_PrmIdAdded(id);
        -:  126:        }
        -:  127:
       41:  128:    }
        -:  129:
       10:  130:    void PrmDbImpl::PRM_SAVE_FILE_cmdHandler(FwOpcodeType opCode, U32 cmdSeq) {
        -:  131:
       10:  132:        Os::File paramFile;
       11:  133:        WorkingBuffer buff;
        -:  134:
       10:  135:        Os::File::Status stat = paramFile.open(this->m_fileName.toChar(),Os::File::OPEN_WRITE);
       10:  136:        if (stat != Os::File::OP_OK) {
        1:  137:            this->log_WARNING_HI_PrmFileWriteError(PRM_WRITE_OPEN,0,stat);
        1:  138:            this->cmdResponse_out(opCode,cmdSeq,Fw::COMMAND_EXECUTION_ERROR);
        1:  139:            return;
        -:  140:        }
        -:  141:
        9:  142:        this->lock();
        -:  143:
        -:  144:        // Traverse the parameter list, saving each entry
        -:  145:
        9:  146:        U32 numRecords = 0;
        -:  147:
       34:  148:        for (NATIVE_UINT_TYPE entry = 0; entry < FW_NUM_ARRAY_ELEMENTS(this->m_db); entry++) {
       33:  149:            if (this->m_db[entry].used) {
        -:  150:                // write delimiter
        -:  151:                static const U8 delim = PRMDB_ENTRY_DELIMITER;
       10:  152:                NATIVE_INT_TYPE writeSize = sizeof(delim);
       10:  153:                stat = paramFile.write(&delim,writeSize,true);
       10:  154:                if (stat != Os::File::OP_OK) {
        1:  155:                    this->unLock();
        1:  156:                    this->log_WARNING_HI_PrmFileWriteError(PRM_WRITE_DELIMITER,numRecords,stat);
        1:  157:                    this->cmdResponse_out(opCode,cmdSeq,Fw::COMMAND_EXECUTION_ERROR);
        9:  158:                    return;
        -:  159:                }
        9:  160:                if (writeSize != sizeof(delim)) {
        1:  161:                    this->unLock();
        1:  162:                    this->log_WARNING_HI_PrmFileWriteError(PRM_WRITE_DELIMITER_SIZE,numRecords,writeSize);
        1:  163:                    this->cmdResponse_out(opCode,cmdSeq,Fw::COMMAND_EXECUTION_ERROR);
        1:  164:                    return;
        -:  165:                }
        -:  166:                // serialize record size = id field + data
        8:  167:                U32 recordSize = sizeof(FwPrmIdType) + this->m_db[entry].val.getBuffLength();
        -:  168:
        -:  169:                // reset buffer
        8:  170:                buff.resetSer();
        8:  171:                Fw::SerializeStatus serStat = buff.serialize(recordSize);
        -:  172:                // should always work
        8:  173:                FW_ASSERT(Fw::FW_SERIALIZE_OK == serStat,(NATIVE_INT_TYPE)serStat);
        -:  174:
        -:  175:                // write record size
        8:  176:                writeSize = buff.getBuffLength();
        8:  177:                stat = paramFile.write(buff.getBuffAddr(),writeSize,true);
        8:  178:                if (stat != Os::File::OP_OK) {
        1:  179:                    this->unLock();
        1:  180:                    this->log_WARNING_HI_PrmFileWriteError(PRM_WRITE_RECORD_SIZE,numRecords,stat);
        1:  181:                    this->cmdResponse_out(opCode,cmdSeq,Fw::COMMAND_EXECUTION_ERROR);
        1:  182:                    return;
        -:  183:                }
        7:  184:                if (writeSize != sizeof(writeSize)) {
        1:  185:                    this->unLock();
        1:  186:                    this->log_WARNING_HI_PrmFileWriteError(PRM_WRITE_RECORD_SIZE_SIZE,numRecords,writeSize);
        1:  187:                    this->cmdResponse_out(opCode,cmdSeq,Fw::COMMAND_EXECUTION_ERROR);
        1:  188:                    return;
        -:  189:                }
        -:  190:
        -:  191:                // reset buffer
        6:  192:                buff.resetSer();
        -:  193:
        -:  194:                // serialize parameter id
        -:  195:
        6:  196:                serStat = buff.serialize(this->m_db[entry].id);
        -:  197:                // should always work
        6:  198:                FW_ASSERT(Fw::FW_SERIALIZE_OK == serStat,(NATIVE_INT_TYPE)serStat);
        -:  199:
        -:  200:                // write parameter ID
        6:  201:                writeSize = buff.getBuffLength();
        6:  202:                stat = paramFile.write(buff.getBuffAddr(),writeSize,true);
        6:  203:                if (stat != Os::File::OP_OK) {
        1:  204:                    this->unLock();
        1:  205:                    this->log_WARNING_HI_PrmFileWriteError(PRM_WRITE_PARAMETER_ID,numRecords,stat);
        1:  206:                    this->cmdResponse_out(opCode,cmdSeq,Fw::COMMAND_EXECUTION_ERROR);
        1:  207:                    return;
        -:  208:                }
        5:  209:                if (writeSize != (NATIVE_INT_TYPE)buff.getBuffLength()) {
        1:  210:                    this->unLock();
        1:  211:                    this->log_WARNING_HI_PrmFileWriteError(PRM_WRITE_PARAMETER_ID_SIZE,numRecords,writeSize);
        1:  212:                    this->cmdResponse_out(opCode,cmdSeq,Fw::COMMAND_EXECUTION_ERROR);
        1:  213:                    return;
        -:  214:                }
        -:  215:
        -:  216:                // write serialized parameter value
        -:  217:
        4:  218:                writeSize = this->m_db[entry].val.getBuffLength();
        4:  219:                stat = paramFile.write(this->m_db[entry].val.getBuffAddr(),writeSize,true);
        4:  220:                if (stat != Os::File::OP_OK) {
        1:  221:                    this->unLock();
        1:  222:                    this->log_WARNING_HI_PrmFileWriteError(PRM_WRITE_PARAMETER_VALUE,numRecords,stat);
        1:  223:                    this->cmdResponse_out(opCode,cmdSeq,Fw::COMMAND_EXECUTION_ERROR);
        1:  224:                    return;
        -:  225:                }
        3:  226:                if (writeSize != (NATIVE_INT_TYPE)this->m_db[entry].val.getBuffLength()) {
        1:  227:                    this->unLock();
        1:  228:                    this->log_WARNING_HI_PrmFileWriteError(PRM_WRITE_PARAMETER_VALUE_SIZE,numRecords,writeSize);
        1:  229:                    this->cmdResponse_out(opCode,cmdSeq,Fw::COMMAND_EXECUTION_ERROR);
        1:  230:                    return;
        -:  231:                }
        2:  232:                numRecords++;
        -:  233:            } // end if record in use
        -:  234:        } // end for each record
        -:  235:
        1:  236:        this->unLock();
        1:  237:        this->log_ACTIVITY_HI_PrmFileSaveComplete(numRecords);
        2:  238:        this->cmdResponse_out(opCode,cmdSeq,Fw::COMMAND_OK);
        -:  239:
        -:  240:    }
        -:  241:
        6:  242:    PrmDbImpl::~PrmDbImpl() {
        6:  243:    }
        -:  244:
       12:  245:    void PrmDbImpl::readParamFile(void) {
        -:  246:        // load file. FIXME: Put more robust file checking, such as a CRC.
       12:  247:        Os::File paramFile;
        -:  248:
       12:  249:        Os::File::Status stat = paramFile.open(this->m_fileName.toChar(),Os::File::OPEN_READ);
       12:  250:        if (stat != Os::File::OP_OK) {
        1:  251:            this->log_WARNING_HI_PrmFileReadError(PRM_READ_OPEN,0,stat);
        1:  252:            return;
        -:  253:        }
        -:  254:
       12:  255:        WorkingBuffer buff;
        -:  256:
       11:  257:        U32 recordNum = 0;
        -:  258:
       11:  259:        this->clearDb();
        -:  260:
       26:  261:        for (NATIVE_INT_TYPE entry = 0; entry < PRMDB_NUM_DB_ENTRIES; entry++)  {
        -:  262:
        -:  263:            U8 delimiter;
       13:  264:            NATIVE_INT_TYPE readSize = sizeof(delimiter);
        -:  265:
        -:  266:            // read delimiter
       13:  267:            Os::File::Status fStat = paramFile.read(&delimiter,readSize,true);
        -:  268:
        -:  269:            // check for end of file (read size 0)
       13:  270:            if (0 == readSize) {
        1:  271:                break;
        -:  272:            }
        -:  273:
       12:  274:            if (fStat != Os::File::OP_OK) {
        1:  275:                this->log_WARNING_HI_PrmFileReadError(PRM_READ_DELIMITER,recordNum,fStat);
       11:  276:                return;
        -:  277:            }
        -:  278:
       11:  279:            if (sizeof(delimiter) != readSize) {
        1:  280:                this->log_WARNING_HI_PrmFileReadError(PRM_READ_DELIMITER_SIZE,recordNum,readSize);
        1:  281:                return;
        -:  282:            }
        -:  283:
       10:  284:            if (PRMDB_ENTRY_DELIMITER != delimiter) {
        1:  285:                this->log_WARNING_HI_PrmFileReadError(PRM_READ_DELIMITER_VALUE,recordNum,delimiter);
        1:  286:                return;
        -:  287:            }
        -:  288:
        -:  289:            U32 recordSize;
        -:  290:            // read record size
        9:  291:            readSize = sizeof(recordSize);
        -:  292:
        9:  293:            fStat = paramFile.read(buff.getBuffAddr(),readSize,true);
        9:  294:            if (fStat != Os::File::OP_OK) {
        1:  295:                this->log_WARNING_HI_PrmFileReadError(PRM_READ_RECORD_SIZE,recordNum,fStat);
        1:  296:                return;
        -:  297:            }
        8:  298:            if (sizeof(recordSize) != readSize) {
        1:  299:                this->log_WARNING_HI_PrmFileReadError(PRM_READ_RECORD_SIZE_SIZE,recordNum,readSize);
        1:  300:                return;
        -:  301:            }
        -:  302:            // set serialized size to read size
        7:  303:            Fw::SerializeStatus desStat = buff.setBuffLen(readSize);
        -:  304:            // should never fail
        7:  305:            FW_ASSERT(Fw::FW_SERIALIZE_OK == desStat,(NATIVE_INT_TYPE)desStat);
        -:  306:            // reset deserialization
        7:  307:            buff.resetDeser();
        -:  308:            // deserialize, since record size is serialized in file
        7:  309:            FW_ASSERT(Fw::FW_SERIALIZE_OK == buff.deserialize(recordSize));
        -:  310:
        -:  311:            // sanity check value. It can't be larger than the maximum parameter buffer size + id
        -:  312:            // or smaller than the record id
        7:  313:            if ((recordSize > FW_PARAM_BUFFER_MAX_SIZE + sizeof(U32)) or (recordSize < sizeof(U32))) {
        1:  314:                this->log_WARNING_HI_PrmFileReadError(PRM_READ_RECORD_SIZE_VALUE,recordNum,recordSize);
        1:  315:                return;
        -:  316:            }
        -:  317:
        -:  318:            // read the parameter ID
        6:  319:            FwPrmIdType parameterId = 0;
        6:  320:            readSize = sizeof(FwPrmIdType);
        -:  321:
        6:  322:            fStat = paramFile.read(buff.getBuffAddr(),readSize,true);
        6:  323:            if (fStat != Os::File::OP_OK) {
        1:  324:                this->log_WARNING_HI_PrmFileReadError(PRM_READ_PARAMETER_ID,recordNum,fStat);
        1:  325:                return;
        -:  326:            }
        5:  327:            if (sizeof(parameterId) != static_cast<NATIVE_INT_TYPE>(readSize)) {
        1:  328:                this->log_WARNING_HI_PrmFileReadError(PRM_READ_PARAMETER_ID_SIZE,recordNum,readSize);
        1:  329:                return;
        -:  330:            }
        -:  331:
        -:  332:            // set serialized size to read parameter ID
        4:  333:            desStat = buff.setBuffLen(readSize);
        -:  334:            // should never fail
        4:  335:            FW_ASSERT(Fw::FW_SERIALIZE_OK == desStat,(NATIVE_INT_TYPE)desStat);
        -:  336:            // reset deserialization
        4:  337:            buff.resetDeser();
        -:  338:            // deserialize, since parameter ID is serialized in file
        4:  339:            FW_ASSERT(Fw::FW_SERIALIZE_OK == buff.deserialize(parameterId));
        -:  340:
        -:  341:            // copy parameter
        4:  342:            this->m_db[entry].used = true;
        4:  343:            this->m_db[entry].id = parameterId;
        4:  344:            readSize = recordSize-sizeof(parameterId);
        -:  345:
        4:  346:            fStat = paramFile.read(this->m_db[entry].val.getBuffAddr(),readSize);
        -:  347:
        4:  348:            if (fStat != Os::File::OP_OK) {
        1:  349:                this->log_WARNING_HI_PrmFileReadError(PRM_READ_PARAMETER_VALUE,recordNum,fStat);
        1:  350:                return;
        -:  351:            }
        3:  352:            if (static_cast<U32>(readSize) != recordSize-sizeof(parameterId)) {
        1:  353:                this->log_WARNING_HI_PrmFileReadError(PRM_READ_PARAMETER_VALUE_SIZE,recordNum,readSize);
        1:  354:                return;
        -:  355:            }
        -:  356:
        -:  357:            // set serialized size to read size
        2:  358:            desStat = this->m_db[entry].val.setBuffLen(readSize);
        -:  359:            // should never fail
        2:  360:            FW_ASSERT(Fw::FW_SERIALIZE_OK == desStat,(NATIVE_INT_TYPE)desStat);
        2:  361:            recordNum++;
        -:  362:
        -:  363:        }
        -:  364:
        2:  365:        this->log_ACTIVITY_HI_PrmFileLoadComplete(recordNum);
        -:  366:    }
        -:  367:
        -:  368:}
