<?xml version="1.0" encoding="UTF-8"?>

<!-- =====================================================================
ActiveLoggerComponentAi.xml
Generated by fpp-to-xml
====================================================================== -->
<component namespace="Svc" name="ActiveLogger" kind="active">

  <comment>
  A component for logging events
  </comment>

  <import_enum_type>Fw/Log/LogSeverityEnumAi.xml</import_enum_type>
  <import_enum_type>Svc/ActiveLogger/ActiveLogger_EnabledEnumAi.xml</import_enum_type>
  <import_enum_type>Svc/ActiveLogger/ActiveLogger_FilterSeverityEnumAi.xml</import_enum_type>
  <import_port_type>Fw/Cmd/CmdPortAi.xml</import_port_type>
  <import_port_type>Fw/Cmd/CmdRegPortAi.xml</import_port_type>
  <import_port_type>Fw/Cmd/CmdResponsePortAi.xml</import_port_type>
  <import_port_type>Fw/Com/ComPortAi.xml</import_port_type>
  <import_port_type>Fw/Log/LogPortAi.xml</import_port_type>
  <import_port_type>Fw/Log/LogTextPortAi.xml</import_port_type>
  <import_port_type>Fw/Time/TimePortAi.xml</import_port_type>
  <import_port_type>Svc/Fatal/FatalEventPortAi.xml</import_port_type>
  <import_port_type>Svc/Ping/PingPortAi.xml</import_port_type>
  <include_header>Fw/Log/LogBuffer.hpp</include_header>
  <include_header>Fw/Time/Time.hpp</include_header>

  <ports>
    <port name="CmdDisp" data_type="Fw::Cmd" kind="input" role="Cmd" max_number="1">
      <comment>
      Port for receiving commands
      </comment>
    </port>
    <port name="CmdReg" data_type="Fw::CmdReg" kind="output" role="CmdRegistration" max_number="1">
      <comment>
      Port for sending command registration requests
      </comment>
    </port>
    <port name="CmdStatus" data_type="Fw::CmdResponse" kind="output" role="CmdResponse" max_number="1">
      <comment>
      Port for sending command responses
      </comment>
    </port>
    <port name="FatalAnnounce" data_type="Svc::FatalEvent" kind="output" max_number="1">
      <comment>
      FATAL event announce port
      </comment>
    </port>
    <port name="Log" data_type="Fw::Log" kind="output" role="LogEvent" max_number="1">
      <comment>
      Port for emitting events
      </comment>
    </port>
    <port name="LogRecv" data_type="Fw::Log" kind="sync_input" max_number="1">
      <comment>
      Event input port
      </comment>
    </port>
    <port name="LogText" data_type="Fw::LogText" kind="output" role="LogTextEvent" max_number="1">
      <comment>
      Port for emitting text events
      </comment>
    </port>
    <port name="PktSend" data_type="Fw::Com" kind="output" max_number="1">
      <comment>
      Packet send port
      </comment>
    </port>
    <port name="Time" data_type="Fw::Time" kind="output" role="TimeGet" max_number="1">
      <comment>
      Port for getting the time
      </comment>
    </port>
    <port name="pingIn" data_type="Svc::Ping" kind="async_input" max_number="1" full="assert">
      <comment>
      Ping input port
      </comment>
    </port>
    <port name="pingOut" data_type="Svc::Ping" kind="output" max_number="1">
      <comment>
      Ping output port
      </comment>
    </port>
  </ports>

  <internal_interfaces>
    <internal_interface name="loqQueue" priority="1" full="drop">
      <comment>
      Internal interface to send log messages to component thread
      </comment>
      <args>
        <arg name="id" type="FwEventIdType">
          <comment>
          Log ID
          </comment>
        </arg>
        <arg name="timeTag" type="Fw::Time" pass_by="reference">
          <comment>
          Time Tag
          </comment>
        </arg>
        <arg name="severity" type="Fw::LogSeverity">
          <comment>
          The severity argument
          </comment>
        </arg>
        <arg name="args" type="Fw::LogBuffer" pass_by="reference">
          <comment>
          Buffer containing serialized log entry
          </comment>
        </arg>
      </args>
    </internal_interface>
  </internal_interfaces>

  <commands>
    <command kind="sync" opcode="0x0" mnemonic="SET_EVENT_FILTER">
      <comment>
      Set filter for reporting events. Events are not stored in component.
      </comment>
      <args>
        <arg name="filterLevel" type="Svc::ActiveLogger_FilterSeverity">
          <comment>
          Filter level
          </comment>
        </arg>
        <arg name="filterEnabled" type="Svc::ActiveLogger_Enabled">
          <comment>
          Filter state
          </comment>
        </arg>
      </args>
    </command>
    <command kind="async" opcode="0x2" mnemonic="SET_ID_FILTER" full="assert">
      <comment>
      Filter a particular ID
      </comment>
      <args>
        <arg name="ID" type="U32"/>
        <arg name="idFilterEnabled" type="Svc::ActiveLogger_Enabled">
          <comment>
          ID filter state
          </comment>
        </arg>
      </args>
    </command>
    <command kind="async" opcode="0x3" mnemonic="DUMP_FILTER_STATE" full="assert">
      <comment>
      Dump the filter states via events
      </comment>
    </command>
  </commands>

  <events>
    <event id="0x0" name="SEVERITY_FILTER_STATE" severity="ACTIVITY_LO" format_string="%s filter state. %d">
      <comment>
      Dump severity filter state
      </comment>
      <args>
        <arg name="severity" type="Svc::ActiveLogger_FilterSeverity">
          <comment>
          The severity level
          </comment>
        </arg>
        <arg name="enabled" type="bool"/>
      </args>
    </event>
    <event id="0x1" name="ID_FILTER_ENABLED" severity="ACTIVITY_HI" format_string="ID %u is filtered.">
      <comment>
      Indicate ID is filtered
      </comment>
      <args>
        <arg name="ID" type="U32">
          <comment>
          The ID filtered
          </comment>
        </arg>
      </args>
    </event>
    <event id="0x2" name="ID_FILTER_LIST_FULL" severity="WARNING_LO" format_string="ID filter list is full. Cannot filter %u .">
      <comment>
      Attempted to add ID to full ID filter ID
      </comment>
      <args>
        <arg name="ID" type="U32">
          <comment>
          The ID filtered
          </comment>
        </arg>
      </args>
    </event>
    <event id="0x3" name="ID_FILTER_REMOVED" severity="ACTIVITY_HI" format_string="ID filter ID %u removed.">
      <comment>
      Removed an ID from the filter
      </comment>
      <args>
        <arg name="ID" type="U32">
          <comment>
          The ID removed
          </comment>
        </arg>
      </args>
    </event>
    <event id="0x4" name="ID_FILTER_NOT_FOUND" severity="WARNING_LO" format_string="ID filter ID %u not found.">
      <comment>
      ID not in filter
      </comment>
      <args>
        <arg name="ID" type="U32">
          <comment>
          The ID removed
          </comment>
        </arg>
      </args>
    </event>
  </events>

</component>
