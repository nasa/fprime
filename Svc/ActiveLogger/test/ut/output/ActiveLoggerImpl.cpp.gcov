        -:    0:Source:/home/tim/source/isf/Svc/ActiveLogger/ActiveLoggerImpl.cpp
        -:    0:Programs:2
        -:    1:/*
        -:    2: * TestCommand1Impl.cpp
        -:    3: *
        -:    4: *  Created on: Mar 28, 2014
        -:    5: *      Author: tcanham
        -:    6: */
        -:    7:
        -:    8:#include <Svc/ActiveLogger/ActiveLoggerImpl.hpp>
        -:    9:#include <Fw/Types/Assert.hpp>
        -:   10:#include <Os/File.hpp>
        -:   11:
        -:   12:namespace Svc {
        -:   13:
        -:   14:#if FW_OBJECT_NAMES == 1
        8:   15:    ActiveLoggerImpl::ActiveLoggerImpl(const char* name) : ActiveLoggerComponentBase(name)
        -:   16:#else
        -:   17:    ActiveLoggerImpl::ActiveLoggerImpl() :
        -:   18:        ActiveLoggerComponentBase()
        -:   19:#endif
        -:   20:    ,m_fatalHead(0)
        -:   21:    ,m_warningHiHead(0)
        -:   22:    ,m_warningLoHead(0)
        -:   23:    ,m_commandHead(0)
        -:   24:    ,m_activityHiHead(0)
        -:   25:    ,m_activityLoHead(0)
        8:   26:    ,m_diagnosticHead(0)
        -:   27:    {
        -:   28:        // set input filter defaults
        -:   29:        this->m_inFilterState[INPUT_WARNING_HI].enabled =
        8:   30:                INPUT_WARNING_HI_DEFAULT?INPUT_ENABLED:INPUT_DISABLED;
        -:   31:        this->m_inFilterState[INPUT_WARNING_LO].enabled =
        8:   32:                INPUT_WARNING_LO_DEFAULT?INPUT_ENABLED:INPUT_DISABLED;
        -:   33:        this->m_inFilterState[INPUT_COMMAND].enabled =
        8:   34:                INPUT_COMMAND_DEFAULT?INPUT_ENABLED:INPUT_DISABLED;
        -:   35:        this->m_inFilterState[INPUT_ACTIVITY_HI].enabled =
        8:   36:                INPUT_ACTIVITY_HI_DEFAULT?INPUT_ENABLED:INPUT_DISABLED;
        -:   37:        this->m_inFilterState[INPUT_ACTIVITY_LO].enabled =
        8:   38:                INPUT_ACTIVITY_LO_DEFAULT?INPUT_ENABLED:INPUT_DISABLED;
        -:   39:        this->m_inFilterState[INPUT_DIAGNOSTIC].enabled =
        8:   40:                INPUT_DIAGNOSTIC_DEFAULT?INPUT_ENABLED:INPUT_DISABLED;
        -:   41:        // set send filter defaults
        -:   42:        this->m_sendFilterState[SEND_WARNING_HI].enabled =
        8:   43:                SEND_WARNING_HI_DEFAULT?SEND_ENABLED:SEND_DISABLED;
        -:   44:        this->m_sendFilterState[SEND_WARNING_LO].enabled =
        8:   45:                SEND_WARNING_LO_DEFAULT?SEND_ENABLED:SEND_DISABLED;
        -:   46:        this->m_sendFilterState[SEND_COMMAND].enabled =
        8:   47:                SEND_COMMAND_DEFAULT?SEND_ENABLED:SEND_DISABLED;
        -:   48:        this->m_sendFilterState[SEND_ACTIVITY_HI].enabled =
        8:   49:                SEND_ACTIVITY_HI_DEFAULT?SEND_ENABLED:SEND_DISABLED;
        -:   50:        this->m_sendFilterState[SEND_ACTIVITY_LO].enabled =
        8:   51:                SEND_ACTIVITY_LO_DEFAULT?SEND_ENABLED:SEND_DISABLED;
        -:   52:        this->m_sendFilterState[SEND_DIAGNOSTIC].enabled =
        8:   53:                SEND_DIAGNOSTIC_DEFAULT?SEND_ENABLED:SEND_DISABLED;
        -:   54:
        8:   55:        memset(m_filteredIDs,0,sizeof(m_filteredIDs));
        -:   56:
        8:   57:    }
        -:   58:
        8:   59:    ActiveLoggerImpl::~ActiveLoggerImpl() {
        8:   60:    }
        -:   61:
        8:   62:    void ActiveLoggerImpl::init(NATIVE_INT_TYPE queueDepth) {
        8:   63:        ActiveLoggerComponentBase::init(queueDepth);
        8:   64:    }
        -:   65:
      199:   66:    void ActiveLoggerImpl::LogRecv_handler(NATIVE_INT_TYPE portNum, FwEventIdType id, Fw::Time &timeTag, Fw::LogSeverity severity, Fw::LogBuffer &args) {
        -:   67:
        -:   68:        // make sure ID is not zero. Zero is reserved for ID filter.
      199:   69:        FW_ASSERT(id != 0);
        -:   70:
      199:   71:        switch (severity) {
        -:   72:            case Fw::LOG_FATAL: // always pass FATAL
        9:   73:                break;
        -:   74:            case Fw::LOG_WARNING_HI:
       15:   75:                if (this->m_inFilterState[INPUT_WARNING_HI].enabled == INPUT_DISABLED) {
        1:   76:                   return;
        -:   77:                }
       14:   78:                break;
        -:   79:            case Fw::LOG_WARNING_LO:
       24:   80:                if (this->m_inFilterState[INPUT_WARNING_LO].enabled == INPUT_DISABLED) {
        1:   81:                    return;
        -:   82:                }
       23:   83:                break;
        -:   84:            case Fw::LOG_COMMAND:
       24:   85:                if (this->m_inFilterState[INPUT_COMMAND].enabled == INPUT_DISABLED) {
        1:   86:                    return;
        -:   87:                }
       23:   88:                break;
        -:   89:            case Fw::LOG_ACTIVITY_HI:
       49:   90:                if (this->m_inFilterState[INPUT_ACTIVITY_HI].enabled == INPUT_DISABLED) {
        1:   91:                    return;
        -:   92:                }
       48:   93:                break;
        -:   94:            case Fw::LOG_ACTIVITY_LO:
       24:   95:                if (this->m_inFilterState[INPUT_ACTIVITY_LO].enabled == INPUT_DISABLED) {
        1:   96:                    return;
        -:   97:                }
       23:   98:                break;
        -:   99:            case Fw::LOG_DIAGNOSTIC:
       54:  100:                if (this->m_inFilterState[INPUT_DIAGNOSTIC].enabled == INPUT_DISABLED) {
        1:  101:                    return;
        -:  102:                }
       53:  103:                break;
        -:  104:            default:
    #####:  105:                FW_ASSERT(0,static_cast<NATIVE_INT_TYPE>(severity));
    #####:  106:                return;
        -:  107:        }
        -:  108:
        -:  109:        // check ID filters
     4693:  110:        for (NATIVE_INT_TYPE entry = 0; entry < TELEM_ID_FILTER_SIZE; entry++) {
     4525:  111:            if (
     4551:  112:              (m_filteredIDs[entry] == id) &&
        -:  113:              (severity != Fw::LOG_FATAL)
        -:  114:              ) {
       25:  115:                return;
        -:  116:            }
        -:  117:        }
        -:  118:
        -:  119:        // send event to the logger thread
      168:  120:        this->loqQueue_internalInterfaceInvoke(id,timeTag,static_cast<QueueLogSeverity>(severity),args);
        -:  121:
        -:  122:        // if connected, announce the FATAL
      168:  123:        if (Fw::LOG_FATAL == severity) {
        9:  124:            if (this->isConnected_FatalAnnounce_OutputPort(0)) {
        9:  125:                this->FatalAnnounce_out(0,id);
        -:  126:            }
        -:  127:        }
        -:  128:    }
        -:  129:
      168:  130:    void ActiveLoggerImpl::loqQueue_internalInterfaceHandler(FwEventIdType id, Fw::Time &timeTag, QueueLogSeverity severity, Fw::LogBuffer &args) {
        -:  131:
        -:  132:        // Serialize event
      168:  133:        this->m_logPacket.setId(id);
      168:  134:        this->m_logPacket.setTimeTag(timeTag);
      168:  135:        this->m_logPacket.setLogBuffer(args);
      168:  136:        this->m_comBuffer.resetSer();
      168:  137:        Fw::SerializeStatus stat = this->m_logPacket.serialize(this->m_comBuffer);
      168:  138:        FW_ASSERT(Fw::FW_SERIALIZE_OK == stat,static_cast<NATIVE_INT_TYPE>(stat));
        -:  139:
      168:  140:        switch (severity) {
        -:  141:            case QUEUE_LOG_FATAL: // always pass FATAL
        9:  142:                this->m_fatalCb[this->m_fatalHead] = this->m_comBuffer;
        9:  143:                this->m_fatalHead = (this->m_fatalHead + 1)%FW_NUM_ARRAY_ELEMENTS(this->m_fatalCb);
        9:  144:                break;
        -:  145:            case QUEUE_LOG_WARNING_HI:
       14:  146:                this->m_warningHiCb[this->m_warningHiHead] = this->m_comBuffer;
       14:  147:                this->m_warningHiHead = (this->m_warningHiHead + 1)%FW_NUM_ARRAY_ELEMENTS(this->m_warningHiCb);
       14:  148:                if (this->m_sendFilterState[SEND_WARNING_HI].enabled == SEND_DISABLED) {
        1:  149:                   return;
        -:  150:                }
       13:  151:                break;
        -:  152:            case QUEUE_LOG_WARNING_LO:
       23:  153:                this->m_warningLoCb[this->m_warningLoHead] = this->m_comBuffer;
       23:  154:                this->m_warningLoHead = (this->m_warningLoHead + 1)%FW_NUM_ARRAY_ELEMENTS(this->m_warningLoCb);
       23:  155:                if (this->m_sendFilterState[SEND_WARNING_LO].enabled == SEND_DISABLED) {
        1:  156:                    return;
        -:  157:                }
       22:  158:                break;
        -:  159:            case QUEUE_LOG_COMMAND:
       23:  160:                this->m_commandCb[this->m_commandHead] = this->m_comBuffer;
       23:  161:                this->m_commandHead = (this->m_commandHead + 1)%FW_NUM_ARRAY_ELEMENTS(this->m_commandCb);
       23:  162:                if (this->m_sendFilterState[SEND_COMMAND].enabled == SEND_DISABLED) {
        1:  163:                    return;
        -:  164:                }
       22:  165:                break;
        -:  166:            case QUEUE_LOG_ACTIVITY_HI:
       23:  167:                this->m_activityHiCb[this->m_activityHiHead] = this->m_comBuffer;
       23:  168:                this->m_activityHiHead = (this->m_activityHiHead + 1)%FW_NUM_ARRAY_ELEMENTS(this->m_activityHiCb);
       23:  169:                if (this->m_sendFilterState[SEND_ACTIVITY_HI].enabled == SEND_DISABLED) {
        1:  170:                    return;
        -:  171:                }
       22:  172:                break;
        -:  173:            case QUEUE_LOG_ACTIVITY_LO:
       23:  174:                this->m_activityLoCb[this->m_activityLoHead] = this->m_comBuffer;
       23:  175:                this->m_activityLoHead = (this->m_activityLoHead + 1)%FW_NUM_ARRAY_ELEMENTS(this->m_activityLoCb);
       23:  176:                if (this->m_sendFilterState[SEND_ACTIVITY_LO].enabled == SEND_DISABLED) {
        1:  177:                    return;
        -:  178:                }
       22:  179:                break;
        -:  180:            case QUEUE_LOG_DIAGNOSTIC:
       53:  181:                this->m_diagnosticCb[this->m_diagnosticHead] = this->m_comBuffer;
       53:  182:                this->m_diagnosticHead = (this->m_diagnosticHead + 1)%FW_NUM_ARRAY_ELEMENTS(this->m_diagnosticCb);
       53:  183:                if (this->m_sendFilterState[SEND_DIAGNOSTIC].enabled == SEND_DISABLED) {
        1:  184:                    return;
        -:  185:                }
       52:  186:                break;
        -:  187:            default:
    #####:  188:                FW_ASSERT(0,static_cast<NATIVE_INT_TYPE>(severity));
    #####:  189:                return;
        -:  190:        }
        -:  191:
      162:  192:        if (this->isConnected_PktSend_OutputPort(0)) {
      162:  193:            this->PktSend_out(0, this->m_comBuffer,0);
        -:  194:        }
        -:  195:    }
        -:  196:
       52:  197:    void ActiveLoggerImpl::ALOG_SET_EVENT_REPORT_FILTER_cmdHandler(FwOpcodeType opCode, U32 cmdSeq, InputFilterLevel FilterLevel, InputFilterEnabled FilterEnable) {
      103:  198:        if (  (FilterLevel > INPUT_DIAGNOSTIC) or
      101:  199:              (FilterLevel < INPUT_WARNING_HI) or
       99:  200:              (FilterEnable < INPUT_ENABLED) or
       49:  201:              (FilterEnable > INPUT_DISABLED)) {
        4:  202:            this->cmdResponse_out(opCode,cmdSeq,Fw::COMMAND_VALIDATION_ERROR);
       56:  203:            return;
        -:  204:        }
       48:  205:        this->m_inFilterState[FilterLevel].enabled = FilterEnable;
       48:  206:        this->cmdResponse_out(opCode,cmdSeq,Fw::COMMAND_OK);
        -:  207:    }
        -:  208:
       52:  209:    void ActiveLoggerImpl::ALOG_SET_EVENT_SEND_FILTER_cmdHandler(FwOpcodeType opCode, U32 cmdSeq, SendFilterLevel FilterLevel, SendFilterEnabled FilterEnable) {
      103:  210:        if (  (FilterLevel > SEND_DIAGNOSTIC) or
      101:  211:              (FilterLevel < SEND_WARNING_HI) or
       99:  212:              (FilterEnable < SEND_ENABLED) or
       49:  213:              (FilterEnable > SEND_DISABLED)) {
        4:  214:            this->cmdResponse_out(opCode,cmdSeq,Fw::COMMAND_VALIDATION_ERROR);
       56:  215:            return;
        -:  216:        }
       48:  217:        this->m_sendFilterState[FilterLevel].enabled = FilterEnable;
       48:  218:        this->cmdResponse_out(opCode,cmdSeq,Fw::COMMAND_OK);
        -:  219:    }
        -:  220:
       17:  221:    void ActiveLoggerImpl::ALOG_DUMP_EVENT_LOG_cmdHandler(FwOpcodeType opCode, U32 cmdSeq, const Fw::CmdStringArg& filename) {
        -:  222:        // Walk through each event type and write it to the file
        -:  223:
        -:  224:        static const BYTE delimiter = 0xA5;
        -:  225:        // open the file
       17:  226:        Os::File file;
       17:  227:        Os::File::Status stat = file.open(filename.toChar(),Os::File::OPEN_WRITE);
       17:  228:        if (stat != Os::File::OP_OK) {
        1:  229:            this->log_WARNING_HI_ALOG_FILE_WRITE_ERR(LOG_WRITE_OPEN,(I32)stat);
        1:  230:            this->cmdResponse_out(opCode,cmdSeq,Fw::COMMAND_EXECUTION_ERROR);
        1:  231:            return;
        -:  232:        }
        -:  233:
       16:  234:        NATIVE_UINT_TYPE numRecords = 0;
        -:  235:
        -:  236:        NATIVE_INT_TYPE fileWriteSize;
        -:  237:        // write FATAL
       34:  238:        for (NATIVE_UINT_TYPE entry = 0; entry < FW_NUM_ARRAY_ELEMENTS(this->m_fatalCb); entry++) {
        -:  239:
        -:  240:            // if there is data, write it
       33:  241:            if (this->m_fatalCb[entry].getBuffLength() != 0) {
        -:  242:                // write delimiter
       20:  243:                fileWriteSize = sizeof(delimiter);
       20:  244:                stat = file.write(&delimiter,fileWriteSize);
       20:  245:                if (stat != Os::File::OP_OK) {
        1:  246:                    this->log_WARNING_HI_ALOG_FILE_WRITE_ERR(LOG_WRITE_FATAL_DELIMITER,stat);
        1:  247:                    this->cmdResponse_out(opCode,cmdSeq,Fw::COMMAND_EXECUTION_ERROR);
        1:  248:                    file.close();
        1:  249:                    return;
        -:  250:                }
        -:  251:
        -:  252:                // write event record
       19:  253:                fileWriteSize = this->m_fatalCb[entry].getBuffLength();
       19:  254:                stat = file.write(this->m_fatalCb[entry].getBuffAddr(),fileWriteSize);
       19:  255:                if (stat != Os::File::OP_OK) {
        1:  256:                    this->log_WARNING_HI_ALOG_FILE_WRITE_ERR(LOG_WRITE_FATAL_RECORD,stat);
        1:  257:                    this->cmdResponse_out(opCode,cmdSeq,Fw::COMMAND_EXECUTION_ERROR);
        1:  258:                    file.close();
        1:  259:                    return;
        -:  260:                }
       18:  261:                numRecords++;
        -:  262:            } else {
        -:  263:                // if the entry is empty, that means it is only a partially filled list, so quit writing
       13:  264:                break;
        -:  265:            }
        -:  266:        }
        -:  267:
        -:  268:        // write WARNING HI
       35:  269:        for (NATIVE_UINT_TYPE entry = 0; entry < FW_NUM_ARRAY_ELEMENTS(this->m_warningHiCb); entry++) {
        -:  270:            // if there is data, write it
       34:  271:            if (this->m_warningHiCb[entry].getBuffLength() != 0) {
        -:  272:                // write delimiter
       23:  273:                fileWriteSize = sizeof(delimiter);
       23:  274:                stat = file.write(&delimiter,fileWriteSize);
       23:  275:                if (stat != Os::File::OP_OK) {
        1:  276:                    this->log_WARNING_HI_ALOG_FILE_WRITE_ERR(LOG_WRITE_WARNING_HI_DELIMITER,stat);
        1:  277:                    this->cmdResponse_out(opCode,cmdSeq,Fw::COMMAND_EXECUTION_ERROR);
        1:  278:                    file.close();
        1:  279:                    return;
        -:  280:                }
        -:  281:
        -:  282:                // write event record
       22:  283:                fileWriteSize = this->m_warningHiCb[entry].getBuffLength();
       22:  284:                stat = file.write(this->m_warningHiCb[entry].getBuffAddr(),fileWriteSize);
       22:  285:                if (stat != Os::File::OP_OK) {
        1:  286:                    this->log_WARNING_HI_ALOG_FILE_WRITE_ERR(LOG_WRITE_WARNING_HI_RECORD,stat);
        1:  287:                    this->cmdResponse_out(opCode,cmdSeq,Fw::COMMAND_EXECUTION_ERROR);
        1:  288:                    file.close();
        1:  289:                    return;
        -:  290:                }
       21:  291:                numRecords++;
        -:  292:            } else {
        -:  293:                // if the entry is empty, that means it is only a partially filled list, so quit writing
       11:  294:                break;
        -:  295:            }
        -:  296:        }
        -:  297:
        -:  298:        // write WARNING LO
       41:  299:        for (NATIVE_UINT_TYPE entry = 0; entry < FW_NUM_ARRAY_ELEMENTS(this->m_warningLoCb); entry++) {
        -:  300:            // if there is data, write it
       40:  301:            if (this->m_warningLoCb[entry].getBuffLength() != 0) {
        -:  302:                // write delimiter
       31:  303:                fileWriteSize = sizeof(delimiter);
       31:  304:                stat = file.write(&delimiter,fileWriteSize);
       31:  305:                if (stat != Os::File::OP_OK) {
        1:  306:                    this->log_WARNING_HI_ALOG_FILE_WRITE_ERR(LOG_WRITE_WARNING_LO_DELIMITER,stat);
        1:  307:                    this->cmdResponse_out(opCode,cmdSeq,Fw::COMMAND_EXECUTION_ERROR);
        1:  308:                    file.close();
        1:  309:                    return;
        -:  310:                }
        -:  311:
        -:  312:                // write event record
       30:  313:                fileWriteSize = this->m_warningLoCb[entry].getBuffLength();
       30:  314:                stat = file.write(this->m_warningLoCb[entry].getBuffAddr(),fileWriteSize);
       30:  315:                if (stat != Os::File::OP_OK) {
        1:  316:                    this->log_WARNING_HI_ALOG_FILE_WRITE_ERR(LOG_WRITE_WARNING_LO_RECORD,stat);
        1:  317:                    this->cmdResponse_out(opCode,cmdSeq,Fw::COMMAND_EXECUTION_ERROR);
        1:  318:                    file.close();
        1:  319:                    return;
        -:  320:                }
       29:  321:                numRecords++;
        -:  322:            } else {
        -:  323:                // if the entry is empty, that means it is only a partially filled list, so quit writing
        9:  324:                break;
        -:  325:            }
        -:  326:        }
        -:  327:
        -:  328:        // write COMMAND
       37:  329:        for (NATIVE_UINT_TYPE entry = 0; entry < FW_NUM_ARRAY_ELEMENTS(this->m_commandCb); entry++) {
        -:  330:            // if there is data, write it
       36:  331:            if (this->m_commandCb[entry].getBuffLength() != 0) {
        -:  332:                // write delimiter
       29:  333:                fileWriteSize = sizeof(delimiter);
       29:  334:                stat = file.write(&delimiter,fileWriteSize);
       29:  335:                if (stat != Os::File::OP_OK) {
        1:  336:                    this->log_WARNING_HI_ALOG_FILE_WRITE_ERR(LOG_WRITE_COMMAND_DELIMITER,stat);
        1:  337:                    this->cmdResponse_out(opCode,cmdSeq,Fw::COMMAND_EXECUTION_ERROR);
        1:  338:                    file.close();
        1:  339:                    return;
        -:  340:                }
        -:  341:
        -:  342:                // write event record
       28:  343:                fileWriteSize = this->m_commandCb[entry].getBuffLength();
       28:  344:                stat = file.write(this->m_commandCb[entry].getBuffAddr(),fileWriteSize);
       28:  345:                if (stat != Os::File::OP_OK) {
        1:  346:                    this->log_WARNING_HI_ALOG_FILE_WRITE_ERR(LOG_WRITE_COMMAND_RECORD,stat);
        1:  347:                    this->cmdResponse_out(opCode,cmdSeq,Fw::COMMAND_EXECUTION_ERROR);
        1:  348:                    file.close();
        1:  349:                    return;
        -:  350:                }
       27:  351:                numRecords++;
        -:  352:            } else {
        -:  353:                // if the entry is empty, that means it is only a partially filled list, so quit writing
        7:  354:                break;
        -:  355:            }
        -:  356:        }
        -:  357:
        -:  358:        // write ACTIVITY HI
       33:  359:        for (NATIVE_UINT_TYPE entry = 0; entry < FW_NUM_ARRAY_ELEMENTS(this->m_activityHiCb); entry++) {
        -:  360:            // if there is data, write it
       32:  361:            if (this->m_activityHiCb[entry].getBuffLength() != 0) {
        -:  362:                // write delimiter
       27:  363:                fileWriteSize = sizeof(delimiter);
       27:  364:                stat = file.write(&delimiter,fileWriteSize);
       27:  365:                if (stat != Os::File::OP_OK) {
        1:  366:                    this->log_WARNING_HI_ALOG_FILE_WRITE_ERR(LOG_WRITE_ACTIVITY_HI_DELIMITER,stat);
        1:  367:                    this->cmdResponse_out(opCode,cmdSeq,Fw::COMMAND_EXECUTION_ERROR);
        1:  368:                    file.close();
        1:  369:                    return;
        -:  370:                }
        -:  371:
        -:  372:                // write event record
       26:  373:                fileWriteSize = this->m_activityHiCb[entry].getBuffLength();
       26:  374:                stat = file.write(this->m_activityHiCb[entry].getBuffAddr(),fileWriteSize);
       26:  375:                if (stat != Os::File::OP_OK) {
        1:  376:                    this->log_WARNING_HI_ALOG_FILE_WRITE_ERR(LOG_WRITE_ACTIVITY_HI_RECORD,stat);
        1:  377:                    this->cmdResponse_out(opCode,cmdSeq,Fw::COMMAND_EXECUTION_ERROR);
        1:  378:                    file.close();
        1:  379:                    return;
        -:  380:                }
       25:  381:                numRecords++;
        -:  382:            } else {
        -:  383:                // if the entry is empty, that means it is only a partially filled list, so quit writing
        5:  384:                break;
        -:  385:            }
        -:  386:        }
        -:  387:
        -:  388:        // write ACTIVITY LO
       29:  389:        for (NATIVE_UINT_TYPE entry = 0; entry < FW_NUM_ARRAY_ELEMENTS(this->m_activityLoCb); entry++) {
        -:  390:            // if there is data, write it
       28:  391:            if (this->m_activityLoCb[entry].getBuffLength() != 0) {
        -:  392:                // write delimiter
       25:  393:                fileWriteSize = sizeof(delimiter);
       25:  394:                stat = file.write(&delimiter,fileWriteSize);
       25:  395:                if (stat != Os::File::OP_OK) {
        1:  396:                    this->log_WARNING_HI_ALOG_FILE_WRITE_ERR(LOG_WRITE_ACTIVITY_LO_DELIMITER,stat);
        1:  397:                    this->cmdResponse_out(opCode,cmdSeq,Fw::COMMAND_EXECUTION_ERROR);
        1:  398:                    file.close();
        1:  399:                    return;
        -:  400:                }
        -:  401:
        -:  402:                // write event record
       24:  403:                fileWriteSize = this->m_activityLoCb[entry].getBuffLength();
       24:  404:                stat = file.write(this->m_activityLoCb[entry].getBuffAddr(),fileWriteSize);
       24:  405:                if (stat != Os::File::OP_OK) {
        1:  406:                    this->log_WARNING_HI_ALOG_FILE_WRITE_ERR(LOG_WRITE_ACTIVITY_LO_RECORD,stat);
        1:  407:                    this->cmdResponse_out(opCode,cmdSeq,Fw::COMMAND_EXECUTION_ERROR);
        1:  408:                    file.close();
        1:  409:                    return;
        -:  410:                }
       23:  411:                numRecords++;
        -:  412:            } else {
        -:  413:                // if the entry is empty, that means it is only a partially filled list, so quit writing
        3:  414:                break;
        -:  415:            }
        -:  416:        }
        -:  417:
        -:  418:        // write DIAGNOSTIC
       55:  419:        for (NATIVE_UINT_TYPE entry = 0; entry < FW_NUM_ARRAY_ELEMENTS(this->m_diagnosticCb); entry++) {
        -:  420:            // if there is data, write it
       54:  421:            if (this->m_diagnosticCb[entry].getBuffLength() != 0) {
        -:  422:                // write delimiter
       53:  423:                fileWriteSize = sizeof(delimiter);
       53:  424:                stat = file.write(&delimiter,fileWriteSize);
       53:  425:                if (stat != Os::File::OP_OK) {
        1:  426:                    this->log_WARNING_HI_ALOG_FILE_WRITE_ERR(LOG_WRITE_DIAGNOSTIC_DELIMITER,stat);
        1:  427:                    this->cmdResponse_out(opCode,cmdSeq,Fw::COMMAND_EXECUTION_ERROR);
        1:  428:                    file.close();
        1:  429:                    return;
        -:  430:                }
        -:  431:
        -:  432:                // write event record
       52:  433:                fileWriteSize = this->m_diagnosticCb[entry].getBuffLength();
       52:  434:                stat = file.write(this->m_diagnosticCb[entry].getBuffAddr(),fileWriteSize);
       52:  435:                if (stat != Os::File::OP_OK) {
        1:  436:                    this->log_WARNING_HI_ALOG_FILE_WRITE_ERR(LOG_WRITE_DIAGNOSTIC_RECORD,stat);
        1:  437:                    this->cmdResponse_out(opCode,cmdSeq,Fw::COMMAND_EXECUTION_ERROR);
        1:  438:                    file.close();
        1:  439:                    return;
        -:  440:                }
       51:  441:                numRecords++;
        -:  442:            } else {
        -:  443:                // if the entry is empty, that means it is only a partially filled list, so quit writing
        1:  444:                break;
        -:  445:            }
        -:  446:        }
        -:  447:
        2:  448:        file.close();
        -:  449:
        2:  450:        this->log_ACTIVITY_HI_ALOG_FILE_WRITE_COMPLETE(numRecords);
        -:  451:
        2:  452:        this->cmdResponse_out(opCode,cmdSeq,Fw::COMMAND_OK);
        -:  453:    }
        -:  454:
       81:  455:    void ActiveLoggerImpl::ALOG_SET_ID_FILTER_cmdHandler(
        -:  456:            FwOpcodeType opCode, //!< The opcode
        -:  457:            U32 cmdSeq, //!< The command sequence number
        -:  458:            U32 ID,
        -:  459:            IdFilterEnabled IdFilterEnable //!< ID filter state
        -:  460:        ) {
        -:  461:
        -:  462:        // check parameter
       81:  463:        switch (IdFilterEnable) {
        -:  464:            case ID_ENABLED:
        -:  465:            case ID_DISABLED:
       80:  466:                break;
        -:  467:            default:
        1:  468:                this->cmdResponse_out(opCode,cmdSeq,Fw::COMMAND_VALIDATION_ERROR);
        1:  469:                return;
        -:  470:        }
        -:  471:
       80:  472:        if (ID_ENABLED == IdFilterEnable) { // add ID
        -:  473:            // search list for existing entry
     1079:  474:            for (NATIVE_INT_TYPE entry = 0; entry < TELEM_ID_FILTER_SIZE; entry++) {
     1050:  475:                if (this->m_filteredIDs[entry] == ID) {
       25:  476:                    this->cmdResponse_out(opCode,cmdSeq,Fw::COMMAND_OK);
       25:  477:                    this->log_ACTIVITY_HI_ALOG_ID_FILTER_ENABLED(ID);
       25:  478:                    return;
        -:  479:                }
        -:  480:            }
        -:  481:            // if not already a match, search for an open slot
      357:  482:            for (NATIVE_INT_TYPE entry = 0; entry < TELEM_ID_FILTER_SIZE; entry++) {
      356:  483:                if (this->m_filteredIDs[entry] == 0) {
       28:  484:                    this->m_filteredIDs[entry] = ID;
       28:  485:                    this->cmdResponse_out(opCode,cmdSeq,Fw::COMMAND_OK);
       28:  486:                    this->log_ACTIVITY_HI_ALOG_ID_FILTER_ENABLED(ID);
       28:  487:                    return;
        -:  488:                }
        -:  489:            }
        -:  490:            // if an empty slot was not found, send an error event
        1:  491:            this->log_WARNING_LO_ALOG_ID_FILTER_LIST_FULL(ID);
        1:  492:            this->cmdResponse_out(opCode,cmdSeq,Fw::COMMAND_EXECUTION_ERROR);
        -:  493:        } else { // remove ID
        -:  494:            // search list for existing entry
      351:  495:            for (NATIVE_INT_TYPE entry = 0; entry < TELEM_ID_FILTER_SIZE; entry++) {
      350:  496:                if (this->m_filteredIDs[entry] == ID) {
       25:  497:                    this->m_filteredIDs[entry] = 0; // zero entry
       25:  498:                    this->cmdResponse_out(opCode,cmdSeq,Fw::COMMAND_OK);
       25:  499:                    this->log_ACTIVITY_HI_ALOG_ID_FILTER_REMOVED(ID);
       25:  500:                    return;
        -:  501:                }
        -:  502:            }
        -:  503:            // if it gets here, wasn't found
        1:  504:            this->log_WARNING_LO_ALOG_ID_FILTER_NOT_FOUND(ID);
        1:  505:            this->cmdResponse_out(opCode,cmdSeq,Fw::COMMAND_EXECUTION_ERROR);
        -:  506:        }
        -:  507:
        -:  508:    }
        -:  509:
        1:  510:    void ActiveLoggerImpl::ALOG_DUMP_FILTER_STATE_cmdHandler(
        -:  511:            FwOpcodeType opCode, //!< The opcode
        -:  512:            U32 cmdSeq //!< The command sequence number
        -:  513:        ) {
        -:  514:
        -:  515:        // first, iterate through severity filters
        7:  516:        for (NATIVE_INT_TYPE filter = 0; filter < InputFilterLevel_MAX; filter++) {
        -:  517:            this->log_ACTIVITY_LO_ALOG_SEVERITY_FILTER_STATE(
        -:  518:                    static_cast<EventFilterState>(filter),
        -:  519:                    INPUT_ENABLED == this->m_inFilterState[filter].enabled,
        -:  520:                    SEND_ENABLED == this->m_sendFilterState[filter].enabled
        6:  521:                    );
        -:  522:        }
        -:  523:
        -:  524:        // iterate through ID filter
       26:  525:        for (NATIVE_INT_TYPE entry = 0; entry < TELEM_ID_FILTER_SIZE; entry++) {
       25:  526:            if (this->m_filteredIDs[entry] != 0) {
        3:  527:                this->log_ACTIVITY_HI_ALOG_ID_FILTER_ENABLED(this->m_filteredIDs[entry]);
        -:  528:            }
        -:  529:        }
        -:  530:
        1:  531:        this->cmdResponse_out(opCode,cmdSeq,Fw::COMMAND_OK);
        1:  532:    }
        -:  533:
        -:  534:} // namespace Svc
