#!/usr/bin/env python3
"""
# ===============================================================================
# NAME: generate_version_header.py
#
# DESCRIPTION:  Creates a version header file of specified name.
#               It takes as input a filename and creates a header file
#               with a constant string which is the git hash of the current version
#
# USAGE: ./generate_version_header.py /path/tofile/version.hpp
#
# AUTHOR: sfregoso
# EMAIL:  sfregoso@jpl.nasa.gov
# DATE CREATED  : Oct. 15, 2021
#
# Copyright 2021, California Institute of Technology.
# ALL RIGHTS RESERVED. U.S. Government Sponsorship acknowledged.
# ===============================================================================
"""
import sys
import os
import subprocess


FALLBACK_VERSION = "v3.0.0"  # Keep up-to-date on release tag


def get_version_str(working_dir):
    """
    System call to get the git hash

    Return: String with git hash
    """
    try:
        output = subprocess.check_output(
            ["git", "describe", "--tags", "--always"], cwd=working_dir
        )
        return output.strip().decode("ascii")
    except subprocess.CalledProcessError:
        return FALLBACK_VERSION


def create_version_file(fid, framework_version, project_version=None):
    """
    Create the version file using the provided name and path.
    """
    # Open file for writing
    fid.write("/*\n")
    fid.write(
        "    This file has been autogenerated using [{}].\n".format(
            os.path.basename(__file__)
        )
    )
    fid.write("    This file may be overwritten.\n")
    fid.write("*/\n")
    fid.write("#ifndef _VERSION_HPP_\n")
    fid.write("#define _VERSION_HPP_\n")
    fid.write("\n")
    fid.write(
        'static const char* PROJECT_VERSION = "{}";\n'.format(
            project_version if project_version is not None else "unknown"
        )
    )
    fid.write(
        'static const char* FRAMEWORK_VERSION = "{}";\n'.format(framework_version)
    )
    fid.write(
        'static const char* VERSION = "{}{}";\n'.format(
            project_version + "/" if project_version is not None else "",
            framework_version,
        )
    )
    fid.write("\n")
    fid.write("#endif\n")
    fid.write("\n")


def main():
    """
    Main program entry point
    """
    versions = []
    for path in [
        os.environ.get("FPRIME_FRAMEWORK_PATH", os.getcwd()),
        os.environ.get("FPRIME_PROJECT_ROOT", None),
    ]:
        if path is not None:
            versions.append(get_version_str(path))

    if len(sys.argv) == 1:
        create_version_file(sys.stdout, *versions)
    else:
        with open(sys.argv[1], "w") as fid:
            create_version_file(fid, *versions)


if __name__ == "__main__":
    main()
