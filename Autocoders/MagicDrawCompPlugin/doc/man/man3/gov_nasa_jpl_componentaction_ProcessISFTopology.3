.TH "gov.nasa.jpl.componentaction.ProcessISFTopology" 3 "Tue Aug 9 2016" "Version 4.3" "MagicDrawCompPlugin" \" -*- nroff -*-
.ad l
.nh
.SH NAME
gov.nasa.jpl.componentaction.ProcessISFTopology \- 
.SH SYNOPSIS
.br
.PP
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static void \fBprocess\fP (Project proj, File pluginDir)  throws IOException "
.br
.ti -1c
.RI "static int \fBgenerateNewMultiplicity\fP (Connector e, int currentMultiplicity, int previousConnectorTargetMult)  throws ConnectorException"
.br
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static HashSet< ISFSubsystem\&.physicalConnectionType > \fBphysicalConnectionSet\fP"
.br
.ti -1c
.RI "static HashMap< String, ISFSubsystem\&.componentType > \fBcomponentMap\fP"
.br
.ti -1c
.RI "static ArrayList< ISFSubsystem\&.physicalConnectionType > \fBphysicalConnectionList\fP"
.br
.ti -1c
.RI "static Map< String, ArrayList< String[]> > \fBsubsystemOwners\fP"
.br
.ti -1c
.RI "static Map< String, Integer > \fBsubsystemInstances\fP"
.br
.ti -1c
.RI "static Map< String,ArrayList< String > > \fBuniqueSubsystemInstanceNames\fP"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "\fBProcessISFTopology\fP ()"
.br
.in -1c
.SS "Static Private Member Functions"

.in +1c
.ti -1c
.RI "static ArrayList< ISFSubsystem\&.physicalConnectionType > \fBindexChecking\fP (HashSet< ISFSubsystem\&.physicalConnectionType > pctSet)  throws ConnectorException"
.br
.ti -1c
.RI "static void \fBcheckPorts\fP ()  throws ConnectorException"
.br
.ti -1c
.RI "static List< Element > \fBprocessModel\fP (Element root)  throws ConnectorException"
.br
.ti -1c
.RI "static boolean \fBisTopSubsystemNode\fP (String key)"
.br
.ti -1c
.RI "static void \fBprocessSubsystem\fP (Element subsystem)  throws ConnectorException "
.br
.ti -1c
.RI "static void \fBcreateConnections\fP ()  throws ConnectorException"
.br
.in -1c
.SS "Static Private Attributes"

.in +1c
.ti -1c
.RI "static Project \fBproject\fP"
.br
.ti -1c
.RI "static Set< String > \fBsubsystemNameSet\fP"
.br
.ti -1c
.RI "static HashMap< String, List< ArrayList< Connector > > > \fBsubsystemMap\fP"
.br
.ti -1c
.RI "static Set< ConnectorEnd > \fBsourcePorts\fP"
.br
.ti -1c
.RI "static Set< ConnectorEnd > \fBtargetPorts\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
This singleton class will process an ISF Project\&. 
.PP
There are three main phases of the processing: 
.PD 0

.IP "\(bu" 2
PHASE ONE: Processing the model 
.PD 0

.IP "  \(bu" 4
A list of all subsystems is made\&.  
.IP "  \(bu" 4
A map of all the components is made\&.  
.IP "  \(bu" 4
A list of all the target ports is made\&.  
.IP "  \(bu" 4
A list of all the source ports is made\&.  
.IP "  \(bu" 4
A map of all the port ends with a list of associated connectors (one list going in, the other going out) is made\&.  
.PP

.IP "\(bu" 2
PHASE TWO: Creating connections 
.PD 0

.IP "  \(bu" 4
All full connections are found using each port in the source port list as a start point\&.  
.IP "  \(bu" 4
Further connections are found using the map of port ends with their associated connectors\&.  
.IP "  \(bu" 4
Some connectors are ignored depending on the multiplicity of the previous source port\&. This multiplicity is recalculated for every connector\&.  
.IP "  \(bu" 4
When reached a port that is not owned by a subsystem, the type is checked\&. If the source port and the target port type do not matched, that target port is ignored\&.  
.IP "  \(bu" 4
This process goes on for each source port until either the target port is found, all the associated connectors have been done being searched, or a time out variable is reached\&.  
.IP "  \(bu" 4
Each source and derived target connector ends are processed through the \fBISFSubsystem\fP physicalConnectionType and added to a list\&.  
.PP

.IP "\(bu" 2
PHASE THREE: Checking ports and writing to XML 
.PD 0

.IP "  \(bu" 4
A map is created with the name of generic modules being associated with a list of the ports on that module\&.  
.IP "  \(bu" 4
This map is cross checked with all the instances of the modules\&. If something in the map does not exist within an instance, the user gets notified by a warning\&.  
.IP "  \(bu" 4
An \fBISFSubsystem\fP topologyModel object is created using the physicalConnectionType list and the map of all the components\&.  
.IP "  \(bu" 4
This object is passed to the IsfSubXmlWriter and is used to generate the flattened XML topology file\&.  
.PP

.PP
.PP
Please note that if you have more than one subsystem to be processed, make sure one of them has a stereotype with the name 'Top'\&. This subsystem will be used for the name of the topology xml\&. If not, an exception will be thrown\&. 
.PP
Exceptions can be generated at any time in this process\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "gov\&.nasa\&.jpl\&.componentaction\&.ProcessISFTopology\&.ProcessISFTopology ()\fC [private]\fP"

.SH "Member Function Documentation"
.PP 
.SS "static void gov\&.nasa\&.jpl\&.componentaction\&.ProcessISFTopology\&.checkPorts () throws \fBConnectorException\fP\fC [static]\fP, \fC [private]\fP"
PHASE THREE FUNCTION 
.PP
Checks if ports on leaf modules have any connections\&. If they do not, a warning is brought up onto the console\&.
.PP
This function first generates a Map with a generic leaf module's name as a key to a list of the 'qualified name' of each port on the module\&. The qualified name is used as an identifier for the generic module\&.
.PP
The function next iterates through all elements with the 'PartProperty' stereotype to find 'unique' leaf components\&. The function now uses the unique leaf components generic name to iterate through each of its' ports\&.
.PP
Each port is then checked to see if it exists as a key in the subsystemMap\&. If it doesn't exist, it means that this port has no connections and a warning flag is immediately notified\&.
.PP
\fBExceptions:\fP
.RS 4
\fI\fBConnectorException\fP\fP 
.RE
.PP

.SS "static void gov\&.nasa\&.jpl\&.componentaction\&.ProcessISFTopology\&.createConnections () throws \fBConnectorException\fP\fC [static]\fP, \fC [private]\fP"
PHASE TWO FUNCTION 
.PP
Iterates through the list of source ports and tries to find the final destination, while checking for errors\&.
.PP
For each source port, the program traces down it's path by accessing the subsystemMap with the port's ID\&. All connections associated with the port are put onto a list, the multiplicity is reevaluated, and the program moves onto processing the next port on the list\&. Every time a new connector is accessed, the target is checked to see if is a leaf target with the same type as the source\&. If it is, an \fBISFSubsystem\fP physicallyConnectionType object is put onto a list\&.
.PP
Additionally, to support multiple instances of ibds, is a a source instance and target instance name is created along side every connection\&. This name is the the root modules name followed by each subsystem which the connection's path goes through\&. This name is used if the program detect that target or source subsystem is used more than once\&.
.PP
Exceptions are thrown in the instances where 
.PD 0

.IP "\(bu" 2
Source multiplicity is repeated by the same port onto multiple connectors\&. 
.IP "\(bu" 2
A source on a singular branch of travel (no other sources share the same path) has a target port at the end with a different type as the source port\&. 
.PP
.PP
\fBExceptions:\fP
.RS 4
\fI\fBConnectorException\fP\fP 
.RE
.PP

.SS "static int gov\&.nasa\&.jpl\&.componentaction\&.ProcessISFTopology\&.generateNewMultiplicity (Connector e, int currentMultiplicity, int previousConnectorTargetMult) throws \fBConnectorException\fP\fC [static]\fP"
PHASE TWO FUNCTION 
.PP
generateMultiplicity is used within createConnections to find the multiplicity of the next connector\&.
.PP
The function takes in three arguments: the current Connector, the multiplicity of the source of the connector (calculated from this function in the previous iteration of the loop) and a 'previousConnectorTargetMult', which is an integer which indicates the 'inorder' position of the target of the Connector by keeping a track of how many connectors have accessed the same end\&.
.PP
\fBParameters:\fP
.RS 4
\fIe\fP Connector element 
.br
\fIcurrentMultiplicity\fP The current multiplicity value of the connector 
.br
\fIpreviousConnectorTargetMult\fP Multiplicity value based on the position of the connector in the port\&.
.RE
.PP
\fBReturns:\fP
.RS 4
New multiplicity value to be used in next iteration 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBConnectorException\fP\fP Only \fBISFSubsystem\&.getConnEnd()\fP will raise the exception in this function\&. 
.RE
.PP

.SS "static ArrayList<ISFSubsystem\&.physicalConnectionType> gov\&.nasa\&.jpl\&.componentaction\&.ProcessISFTopology\&.indexChecking (HashSet< ISFSubsystem\&.physicalConnectionType > pctSet) throws \fBConnectorException\fP\fC [static]\fP, \fC [private]\fP"
PHASE THREE FUNCTION 
.PP
This function serves two purposes\&. The first is to convert the physicalConnectionSet to a physicalConnectionList\&. The second is to perform index checking and correction on ports of the cmdReg/cmd or com/cmdResponse type\&.
.PP
The index checking/correction is done so multiplicities do not need to be specified for cmd/cmdReg or com/cmdResponse (with port names of seqCmdStatus and seqCmdBuff) blocks\&. The latter pair has the additional port name constraint because there are multiple other ports with the same cmdResponse type\&. Some of these port are not to be auto-indexed\&. This makes it easier for the user to add and remove these ports without needing to worry about if the indexes of the pairings match\&.
.PP
The program redefines the indexes in numerical order\&. Even if initial indexes are given, for the origin of Cmd and the target of CmdReg, they are overwritten\&. They target index of Cmd is preserved and also is written to the source of CmdReg\&.
.PP
METHODOLOGY 
.PD 0

.IP "\(bu" 2
Iterate through all items of the physicalConnectionType and add those who have types of Cmd/CmdReg or those who have type of CmdResponse/Com and names of seqCmdStatus/seqCmdBuff to a list in a map where the index is the instance name of the associated cmdDispatch\&.  
.IP "\(bu" 2
Iterate through all keys in the dictionary\&.  
.PD 0

.IP "  \(bu" 4
Iterate through each item in the list and find another item that has the opposite target and source components but is off the same pair\&.  
.IP "  \(bu" 4
If the associated item does not exist and if the search object is of the type of Cmd or Cmd reg, throw an error\&.  
.IP "  \(bu" 4
If the item is of the type Com/CmdResponse or there is an associated pair, add the item(s) to the output list\&.  
.PP

.IP "\(bu" 2
Return a new list of physicalConnectionType objects with auto indexed IDS\&.  
.PD 0

.IP "  \(bu" 4

.PP
pctSet Set of Physical Connection Types 
.PP
\fBReturns:\fP
.RS 4
List of Physical Connection Types 
.RE
.PP

.PP

.SS "static boolean gov\&.nasa\&.jpl\&.componentaction\&.ProcessISFTopology\&.isTopSubsystemNode (String key)\fC [static]\fP, \fC [private]\fP"
Checks the subsystemInstances map (which is a key string mapped to a value of how many times this class is instantiated\&. Will return true if it is a singular system, false if the system isn't instantiated or the instances equal one\&. 
.PP
\fBParameters:\fP
.RS 4
\fIkey\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
.RE
.PP

.SS "static void gov\&.nasa\&.jpl\&.componentaction\&.ProcessISFTopology\&.process (Project proj, File pluginDir) throws IOException\fC [static]\fP"
process handles all the phases of this methodology\&.
.PP
\fBParameters:\fP
.RS 4
\fIproj\fP Project object 
.br
\fIpluginDir\fP Directory to generate documents into 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIIOException\fP 
.RE
.PP

.SS "static List<Element> gov\&.nasa\&.jpl\&.componentaction\&.ProcessISFTopology\&.processModel (Element root) throws \fBConnectorException\fP\fC [static]\fP, \fC [private]\fP"
PHASE ONE FUNCTION 
.PP
processModel has two main functions: to create a list of subsystems and to create a componentMap\&.
.PP
All the elements in the module are iterated through using the Element root\&.
.PP
If the element type is Subsystem, the element is added to a list to be returned\&.
.PP
If the element is an instance of a subsystem, the subsystemOwners map is updated, where each key (name of subsystem) is associated with an list of two string arrays\&. The first String corresponds to the instance name and the second corresponds to the name of the owner of the subsystem\&.
.PP
\fBParameters:\fP
.RS 4
\fIroot\fP Root of the system 
.RE
.PP
\fBReturns:\fP
.RS 4
List of subsystem elements 
.RE
.PP

.SS "static void gov\&.nasa\&.jpl\&.componentaction\&.ProcessISFTopology\&.processSubsystem (Element subsystem) throws \fBConnectorException\fP\fC [static]\fP, \fC [private]\fP"
PHASE ONE FUNCTION 
.PP
processSubsystem populates both the subsystemMap as well as the sourcePorts/targetPorts list\&.
.PP
First, the function's name is used with the subsystemOwners map to create a list tree\&. This list tree is then used to generate all the different names needed to clarify
.PP
The function iterates through all Connectors associated with the subsystem\&. The subsystemMap, sourcePorts, and targetPorts are populated through this iteration\&.
.PP
The subsystemMap is a Map where the key is the ID of each port with an associated list of input and output connectors\&.
.PP
ConnectorEnds of leaf components are also pushed onto sourcePorts and targetPorts lists, respective of what direction they accept data\&.
.PP
Using the list of all instances, each internal module (bbd) is added as an \fBISFSubsystem\fP componentType to the component map, with the new name of the module
.PP
\fBParameters:\fP
.RS 4
\fIsubsystem\fP Subsystem Element 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBConnectorException\fP\fP 
.RE
.PP

.SH "Member Data Documentation"
.PP 
.SS "HashMap<String , ISFSubsystem\&.componentType> gov\&.nasa\&.jpl\&.componentaction\&.ProcessISFTopology\&.componentMap\fC [static]\fP"

.SS "ArrayList<ISFSubsystem\&.physicalConnectionType> gov\&.nasa\&.jpl\&.componentaction\&.ProcessISFTopology\&.physicalConnectionList\fC [static]\fP"

.SS "HashSet<ISFSubsystem\&.physicalConnectionType> gov\&.nasa\&.jpl\&.componentaction\&.ProcessISFTopology\&.physicalConnectionSet\fC [static]\fP"

.SS "Project gov\&.nasa\&.jpl\&.componentaction\&.ProcessISFTopology\&.project\fC [static]\fP, \fC [private]\fP"

.SS "Set<ConnectorEnd> gov\&.nasa\&.jpl\&.componentaction\&.ProcessISFTopology\&.sourcePorts\fC [static]\fP, \fC [private]\fP"

.SS "Map<String , Integer> gov\&.nasa\&.jpl\&.componentaction\&.ProcessISFTopology\&.subsystemInstances\fC [static]\fP"

.SS "HashMap<String , List<ArrayList<Connector> > > gov\&.nasa\&.jpl\&.componentaction\&.ProcessISFTopology\&.subsystemMap\fC [static]\fP, \fC [private]\fP"

.SS "Set<String> gov\&.nasa\&.jpl\&.componentaction\&.ProcessISFTopology\&.subsystemNameSet\fC [static]\fP, \fC [private]\fP"

.SS "Map<String , ArrayList<String[]> > gov\&.nasa\&.jpl\&.componentaction\&.ProcessISFTopology\&.subsystemOwners\fC [static]\fP"

.SS "Set<ConnectorEnd> gov\&.nasa\&.jpl\&.componentaction\&.ProcessISFTopology\&.targetPorts\fC [static]\fP, \fC [private]\fP"

.SS "Map<String ,ArrayList<String> > gov\&.nasa\&.jpl\&.componentaction\&.ProcessISFTopology\&.uniqueSubsystemInstanceNames\fC [static]\fP"


.SH "Author"
.PP 
Generated automatically by Doxygen for MagicDrawCompPlugin from the source code\&.
