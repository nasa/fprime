#include "Tester.hpp"
#include <Autocoders/Python/test/testgen/TestComponentAc.hpp>
#include <Autocoders/Python/test/testgen/TestPortAc.hpp>
#include <Autocoders/Python/test/testgen/TestComponentComponentImpl.hpp>
#include <Autocoders/Python/test/testgen/TestComponentComponentImpl.cpp>

#define INSTANCE 0
#define MAX_HISTORY_SIZE 10
#define QUEUE_DEPTH 10

namespace Ref {

  // ----------------------------------------------------------------------
  // Construction and destruction 
  // ----------------------------------------------------------------------

  Tester ::
    Tester(void) : 
#if FW_OBJECT_NAMES == 1
      MathSenderGTestBase("Tester", MAX_HISTORY_SIZE),
      component("MathSender")
#else
      MathSenderGTestBase(MAX_HISTORY_SIZE),
      component()
#endif
  {
    this->initComponents();
    this->connectPorts();
  }

  Tester ::
    ~Tester(void) 
  {
    
  }

  // ----------------------------------------------------------------------
  // Tests 
  // ----------------------------------------------------------------------

  void Tester ::
    toDo(void) 
  {
		TestGen::TestComponentComponentImpl* inst1 = 0;
		TestGen::TestComponentComponentImpl* inst2 = 0;
		inst1 = new TestGen::TestComponentComponentImpl("inst1");
		inst2 = new TestGen::TestComponentComponentImpl("inst2");
		inst1->set_bportOut_OutputPort(0, inst2->get_bport_InputPort(0));
		inst2->set_bportOut_OutputPort(0, inst1->get_bport_InputPort(0));
		inst1->init(100, 0);
		inst2->init(100, 0);
		inst1->start(0, 100, 10 * 1024);
		inst2->start(0, 100, 10 * 1024);
		inst1->get_bport_InputPort(0)->invoke(1, 2.5, 10);
    // TODO
  }

  // ----------------------------------------------------------------------
  // Handlers for typed from ports
  // ----------------------------------------------------------------------

  void Tester ::
    from_mathOut_handler(
        const NATIVE_INT_TYPE portNum,
        F32 val1,
        F32 val2,
        MathOperation operation
    )
  {
    this->pushFromPortEntry_mathOut(val1, val2, operation);
  }

  // ----------------------------------------------------------------------
  // Helper methods 
  // ----------------------------------------------------------------------

  void Tester ::
    connectPorts(void) 
  {

    // mathIn
    this->connect_to_mathIn(
        0,
        this->component.get_mathIn_InputPort(0)
    );

    // CmdDisp
    this->connect_to_CmdDisp(
        0,
        this->component.get_CmdDisp_InputPort(0)
    );

    // mathOut
    this->component.set_mathOut_OutputPort(
        0, 
        this->get_from_mathOut(0)
    );

    // CmdStatus
    this->component.set_CmdStatus_OutputPort(
        0, 
        this->get_from_CmdStatus(0)
    );

    // CmdReg
    this->component.set_CmdReg_OutputPort(
        0, 
        this->get_from_CmdReg(0)
    );

    // Tlm
    this->component.set_Tlm_OutputPort(
        0, 
        this->get_from_Tlm(0)
    );

    // Time
    this->component.set_Time_OutputPort(
        0, 
        this->get_from_Time(0)
    );

    // Log
    this->component.set_Log_OutputPort(
        0, 
        this->get_from_Log(0)
    );

    // LogText
    this->component.set_LogText_OutputPort(
        0, 
        this->get_from_LogText(0)
    );




  }

  void Tester ::
    initComponents(void) 
  {
    this->init();
    this->component.init(
        QUEUE_DEPTH, INSTANCE
    );
  }

} // end namespace Ref
