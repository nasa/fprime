#raw
# AUTO-GENERATED AS-IS TO LIB DIRECTORY BY COSMOSGEN.PY
# Prints out EVR Strings within COSMOS Data Viewer application
# similar to gse.py application within FPrime

require 'cosmos'
require 'cosmos/tools/data_viewer/data_viewer_component'

module Cosmos
  # This class displays packets as raw hex values
  class EvrDumpComponent < DataViewerComponent
      
    # Prints the header strings for EVR's
    def initialize_gui
        super
        @spaces = {
            "TIME" => 25,
            "NAME" => 25,
            "ID" => 10,
            "SEVERITY" => 15
        }
        @text.font = Cosmos.get_default_font
        @text.appendPlainText("TIME" + " " * @spaces["TIME"] + "NAME" + " " * @spaces["NAME"] + "ID" + " " * @spaces["ID"] + "SEVERITY" + " " * @spaces["SEVERITY"] + "MESSAGE\n" << '-' * 130)
    end

    # Processes the given packet. No gui interaction should be done in this
    # method. Override this method for other components.
    def process_packet (packet)
      # Determine space amount between columns
      time_spaces = ("TIME".length + @spaces["TIME"]) - "#{packet.received_time.formatted}".length
      name_spaces = ("NAME".length + @spaces["NAME"]) - "#{packet.packet_name}".length
      id_spaces = ("ID".length + @spaces["ID"]) - "#{tlm_variable(packet.target_name + ' ' + packet.packet_name + ' EVR_ID', :RAW)}".length
      severity_spaces = ("SEVERITY".length + @spaces["SEVERITY"]) - "#{tlm_variable(packet.target_name + ' ' + packet.packet_name + ' EVR_SEVERITY', :RAW)}".length
      
      processed_text = ''
      processed_text << "\n"
      processed_text << "#{packet.received_time.formatted}" << " " * time_spaces
      processed_text << "#{packet.packet_name}" << " " * name_spaces
      processed_text << "#{tlm_variable(packet.target_name + ' ' + packet.packet_name + ' EVR_ID', :RAW)}" << " " * id_spaces
      processed_text << "#{tlm_variable(packet.target_name + ' ' + packet.packet_name + ' EVR_SEVERITY', :RAW)}" << " " * severity_spaces
      processed_text << "#{tlm_variable(packet.target_name + ' ' + packet.packet_name + ' MESSAGE', :RAW)}"

      # Ensure that queue does not grow infinitely while paused
      if @processed_queue.length < 1000
        @processed_queue << processed_text
      end
    end
  end
end
#end raw
