// ======================================================================
// \title  ${name}/test/ut/Tester.hpp
// \author $user
// \brief  hpp file for ${name} test harness implementation class
//
// \copyright
// Copyright 2009-2015, by the California Institute of Technology.
// ALL RIGHTS RESERVED.  United States Government Sponsorship
// acknowledged.
//
// ======================================================================

\#ifndef TESTER_HPP
\#define TESTER_HPP

\#include "GTestBase.hpp"
\#include "${include_path}/${name}ComponentImpl.hpp"

#if $namespace_list != None
  #for $namespace in $namespace_list
namespace ${namespace} {
  #end for

#end if
  class Tester :
    public $gtest_base
  {

      // ----------------------------------------------------------------------
      // Construction and destruction
      // ----------------------------------------------------------------------

    public:

      //! Construct object Tester
      //!
      Tester();

      //! Destroy object Tester
      //!
      ~Tester();

    public:

      // ----------------------------------------------------------------------
      // Tests
      // ----------------------------------------------------------------------

      //! To do
      //!
      void toDo();

#if len($typed_user_output_ports) > 0:
    private:

      // ----------------------------------------------------------------------
      // Handlers for typed from ports
      // ----------------------------------------------------------------------

  #for $instance, $type, $sync, $priority, $role, $max_num in $typed_user_output_ports:
    #set $return_type = $port_return_type_strs[$instance]
      //! Handler for from_${instance}
      //!
      ${return_type}from_${instance}_handler(
$emit_port_params([ $param_portNum ] + $port_params[$instance])
      );

  #end for
#end if
#if len($serial_output_ports) > 0:
    private:

      // ----------------------------------------------------------------------
      // Handlers for serial from ports
      // ----------------------------------------------------------------------

  #for $instance, $sync, $priority, $max_num in $serial_output_ports:
    #set $return_type = $port_return_type_strs[$instance]
      //! Handler for from_${instance}
      //!
      ${return_type}from_${instance}_handler(
        NATIVE_INT_TYPE portNum, $doxygen_post_comment("The port number")
        Fw::SerializeBufferBase &Buffer $doxygen_post_comment("The serialization buffer")
      );

  #end for
#end if
    private:

      // ----------------------------------------------------------------------
      // Helper methods
      // ----------------------------------------------------------------------

      //! Connect ports
      //!
      void connectPorts();

      //! Initialize components
      //!
      void initComponents();

    private:

      // ----------------------------------------------------------------------
      // Variables
      // ----------------------------------------------------------------------

      //! The component under test
      //!
      ${name}ComponentImpl component;

  };

#if $namespace_list != None
  #for $namespace in $reversed($namespace_list)
} // end namespace $namespace
  #end for

#end if
\#endif
