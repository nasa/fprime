// ======================================================================
// \title  ${name}.hpp
// \author $user
// \brief  cpp file for ${name} test harness implementation class
//
// \copyright
// Copyright 2009-2015, by the California Institute of Technology.
// ALL RIGHTS RESERVED.  United States Government Sponsorship
// acknowledged.
//
// ======================================================================

\#include "Tester.hpp"

\#define INSTANCE 0
\#define MAX_HISTORY_SIZE 10
#if $kind != "passive":
\#define QUEUE_DEPTH 10
#end if

#if $namespace_list != None
  #for $namespace in $namespace_list
namespace ${namespace} {
  #end for
#end if

  // ----------------------------------------------------------------------
  // Construction and destruction
  // ----------------------------------------------------------------------

  Tester ::
    Tester() :
\#if FW_OBJECT_NAMES == 1
      ${gtest_base}("Tester", MAX_HISTORY_SIZE),
      component("${name}")
\#else
      ${gtest_base}(MAX_HISTORY_SIZE),
      component()
\#endif
  {
    this->initComponents();
    this->connectPorts();
  }

  Tester ::
    ~Tester()
  {

  }

  // ----------------------------------------------------------------------
  // Tests
  // ----------------------------------------------------------------------

  void Tester ::
    toDo()
  {
    // TODO
  }

#if len($typed_user_output_ports) > 0:
  // ----------------------------------------------------------------------
  // Handlers for typed from ports
  // ----------------------------------------------------------------------

  #for $instance, $type, $sync, $priority, $role, $max_num in $typed_user_output_ports:
    #set $return_type = $port_return_type_strs[$instance]
  ${return_type}Tester ::
    from_${instance}_handler(
$emit_port_params([ $param_portNum ] + $port_params[$instance])
    )
  {
    this->pushFromPortEntry_${instance}($port_arg_strs[$instance]);
    #if not $return_type[:4] == "void":
    // TODO: Return a value
    #end if
  }

  #end for
#end if
#if len($serial_output_ports) > 0:
  // ----------------------------------------------------------------------
  // Handlers for serial from ports
  // ----------------------------------------------------------------------

  #for $instance, $sync, $priority, $max_num in $serial_output_ports:
    #set $return_type = $port_return_type_strs[$instance]
  ${return_type}Tester ::
    from_${instance}_handler(
        NATIVE_INT_TYPE portNum, $doxygen_post_comment("The port number")
        Fw::SerializeBufferBase &Buffer $doxygen_post_comment("The serialization buffer")
    )
  {
    // TODO
  }

  #end for
#end if
  // ----------------------------------------------------------------------
  // Helper methods
  // ----------------------------------------------------------------------

  void Tester ::
    connectPorts()
  {

#for $instance, $type, $sync, $priority, $full, $role, $max_num in $typed_input_ports:
    // $instance
  #if $max_num == 1 or $max_num == "1":
    this->connect_to_${instance}(
        0,
        this->component.get_${instance}_InputPort(0)
    );
  #else
    #set LT = "<"
    for (NATIVE_INT_TYPE i = 0; i $LT $max_num; ++i) {
      this->connect_to_${instance}(
          i,
          this->component.get_${instance}_InputPort(i)
      );
    }
  #end if

#end for
#for $instance, $type, $sync, $priority, $role, $max_num in $typed_output_ports:
    // $instance
  #if $max_num == 1 or $max_num == "1":
    this->component.set_${instance}_OutputPort(
        0,
        this->get_from_${instance}(0)
    );
  #else
    #set LT = "<"
    for (NATIVE_INT_TYPE i = 0; i $LT $max_num; ++i) {
      this->component.set_${instance}_OutputPort(
          i,
          this->get_from_${instance}(i)
      );
    }
  #end if

#end for

#if len($serial_output_ports) > 0:
  // ----------------------------------------------------------------------
  // Connect serial output ports
  // ----------------------------------------------------------------------
#for $instance, $sync, $priority, $max_num in $serial_output_ports:
  #if $max_num == 1 or $max_num == "1":
    this->component.set_${instance}_OutputPort(
        0,
        this->get_from_${instance}(0)
    );
  #else
    #set LT = "<"
    for (NATIVE_INT_TYPE i = 0; i $LT $max_num; ++i) {
      this->component.set_${instance}_OutputPort(
          i,
          this->get_from_${instance}(i)
      );
    }
  #end if

#end for
#end if

#if len($serial_input_ports) > 0:
  // ----------------------------------------------------------------------
  // Connect serial input ports
  // ----------------------------------------------------------------------
#for $instance, $sync, $priority, $full, $max_num in $serial_input_ports:
    // $instance
  #if $max_num == 1 or $max_num == "1":
    this->connect_to_${instance}(
        0,
        this->component.get_${instance}_InputPort(0)
    );
  #else
    #set LT = "<"
    for (NATIVE_INT_TYPE i = 0; i $LT $max_num; ++i) {
      this->connect_to_${instance}(
          i,
          this->component.get_${instance}_InputPort(i)
      );
    }
  #end if

#end for
#end if

  }

  void Tester ::
    initComponents()
  {
    this->init();
    this->component.init(
#if $kind == "passive"
        INSTANCE
#else
        QUEUE_DEPTH, INSTANCE
#end if
    );
  }

#if $namespace_list != None
  #for $namespace in $reversed($namespace_list)
} // end namespace $namespace
  #end for
#end if
