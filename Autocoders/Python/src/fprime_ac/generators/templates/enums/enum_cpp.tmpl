##
## Template to stamp out serializable enums .cpp file
##
// ======================================================================
// \title  ${name}
// \author Auto-generated
// \brief  cpp file for ${name}
//
// NOTE: this file was automatically generated
//
// ======================================================================

\#include <cstring>
\#include <limits>
\#include "Fw/Types/Assert.hpp"
\#include "${name}EnumAc.hpp"

#if $namespace_list != None
 #for $namespace in $namespace_list
namespace ${namespace} {
 #end for
#end if

  // ----------------------------------------------------------------------
  // Constructors
  // ----------------------------------------------------------------------

  ${name} :: ${name}():Serializable()
  {
#if $default
    this->e = static_cast<t>(${default});
#else
    this->e = static_cast<t>(0);
#end if
  }

  ${name} :: ${name}(const t e):Serializable()
  {
    this->e = e;
  }

  ${name} :: ${name}(const ${name}& other):Serializable()
  {
    this->e = other.e;
  }

  // ----------------------------------------------------------------------
  // Instance methods
  // ----------------------------------------------------------------------

  ${name}& ${name} :: operator=(const ${name}& other)
  {
    this->e = other.e;
    return *this;
  }

  ${name}& ${name} :: operator=(const t a)
  {
    this->e = a;
    return *this;
  }

  ${name}& ${name} :: operator=(const NATIVE_INT_TYPE a)
  {
#set $manual_values = False
#for $item_name,$item_value,$item_comment in $items_list:
#if not $item_value == ""
#set $manual_values = True
#break
#end if
#end for
#if $manual_values == True
    FW_ASSERT(#slurp
#set $value_iter = 0
#for $item_name,$item_value,$item_comment in $items_list:
#if $value_iter == 0
a == $item_value#slurp
#else
 || a == $item_value#slurp
#end if
#set $value_iter = $value_iter + 1
#end for
, static_cast<t>(a));
#else
    FW_ASSERT(a >= 0 && a <= $max_value, static_cast<t>(a));
#end if
    this->e = static_cast<t>(a);
    return *this;
  }

  ${name}& ${name} :: operator=(const NATIVE_UINT_TYPE a)
  {
#set $manual_values = False
#for $item_name,$item_value,$item_comment in $items_list:
#if not $item_value == ""
#set $manual_values = True
#break
#end if
#end for
#if $manual_values == True
    FW_ASSERT(#slurp
#set $value_iter = 0
#for $item_name,$item_value,$item_comment in $items_list:
#if int($item_value) > -1
#if $value_iter == 0
a == $item_value#slurp
#else
 || a == $item_value#slurp
#end if
#set $value_iter = $value_iter + 1
#end if
#end for
, static_cast<t>(a));
#else
    FW_ASSERT(a <= $max_value, static_cast<t>(a));
#end if
    this->e = static_cast<t>(a);
    return *this;
  }

  bool ${name} :: operator==(const ${name}& other) const
  {
    return this->e == other.e;
  }

  bool ${name} :: operator!=(const ${name}& other) const
  {
    return !(*this == other);
  }

\#ifdef BUILD_UT
  std::ostream& operator<<(std::ostream& os, const ${name}& obj) {
    os << "${name}::";
    const ${name}::t e = obj.e;
    switch (e) {
#for $item_name,$item_value,$item_comment in $items_list:
        case ${name}::${item_name}:
          os << "${item_name}";
          break;
#end for
        default:
          os << "[invalid]";
          break;
    }
    os << " (" << e << ")";
    return os;
  }
\#endif

  Fw::SerializeStatus ${name} :: serialize(Fw::SerializeBufferBase& buffer) const
  {
    Fw::SerializeStatus status;
#if $serialize_type
    status = buffer.serialize(static_cast<${serialize_type}>(this->e));
#else
    status = buffer.serialize(static_cast<FwEnumStoreType>(this->e));
#end if
    return status;
  }

  Fw::SerializeStatus ${name} :: deserialize(Fw::SerializeBufferBase& buffer)
  {
    Fw::SerializeStatus status;
#if $serialize_type
    ${serialize_type} es;
#else
    FwEnumStoreType es;
#end if
    status = buffer.deserialize(es);
    if (status == Fw::FW_SERIALIZE_OK)
      this->e = static_cast<t>(es);
    return status;
  }

  \#if FW_SERIALIZABLE_TO_STRING || BUILD_UT
    void ${name} :: toString(Fw::StringBase& text) const {
    const ${name}::t e = this->e;
    switch (e) {
#for $item_name,$item_value,$item_comment in $items_list:
        case ${name}::${item_name}:
          text = "${item_name}";
          break;
#end for
        default:
          text = "[invalid]";
          break;
    }
  }
  \#endif

#if $namespace_list != None
 #for $namespace in $reversed($namespace_list)
} // end namespace $namespace
 #end for
#end if
