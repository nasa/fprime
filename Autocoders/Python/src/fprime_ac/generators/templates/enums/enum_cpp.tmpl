##
## Template to stamp out serializable enums .cpp file
##
// ====================================================================== 
// \title  ${name}
// \author Auto-generated
// \brief  cpp file for ${name}
//
// \copyright
// Copyright 2018 California Institute of Technology.
// ALL RIGHTS RESERVED.  United States Government Sponsorship
// acknowledged. Any commercial use must be negotiated with the Office
// of Technology Transfer at the California Institute of Technology.
// 
// This software may be subject to U.S. export control laws and
// regulations.  By accepting this document, the user agrees to comply
// with all U.S. export laws and regulations.  User has the
// responsibility to obtain export licenses, or other export authority
// as may be required before exporting such information to foreign
// countries or providing access to foreign persons.
// ======================================================================

\#include <string.h>
\#include <limits.h>
\#include "Fw/Types/Assert.hpp"
\#include "${name}EnumAc.hpp"

namespace ${namespace} {

  // ----------------------------------------------------------------------
  // Constructors
  // ----------------------------------------------------------------------
  
  ${name} :: ${name}(void):Serializable()
  {
    this->e = (t)0;
  }
  
  ${name} :: ${name}(const t e):Serializable()
  {
    this->e = e;
  }
  
  ${name} :: ${name}(const ${name}& other):Serializable()
  {
    this->e = other.e;
  }
  
  // ----------------------------------------------------------------------
  // Instance methods
  // ----------------------------------------------------------------------
  
  const ${name}& ${name} :: operator=(const ${name}& other)
  {
    this->e = other.e;
    return *this;
  }
  
  const ${name}& ${name} :: operator=(const NATIVE_INT_TYPE a)
  {
#for $item_name,$item_value,$item_comment in $items_list:
#if not $item_value == ""
#set $manual_values = True
#else
#set $manual_values = False
#end if
#end for
#if $manual_values == True
    FW_ASSERT(#slurp
#set $value_iter = 0
#for $item_name,$item_value,$item_comment in $items_list:
#if $value_iter == 0
a == $item_value#slurp
#else
 || a == $item_value#slurp
#end if
#set $value_iter = $value_iter + 1
#end for
, static_cast<t>(a));
#else
    FW_ASSERT(a >= 0 && a <= $max_value, static_cast<t>(a));
#end if
    this->e = static_cast<t>(a);
    return *this;
  }
  
  const ${name}& ${name} :: operator=(const NATIVE_UINT_TYPE a)
  {
#for $item_name,$item_value,$item_comment in $items_list:
#if not $item_value == ""
#set $manual_values = True
#else
#set $manual_values = False
#end if
#end for
#if $manual_values == True
    FW_ASSERT(#slurp
#set $value_iter = 0
#for $item_name,$item_value,$item_comment in $items_list:
#if int($item_value) > -1
#if $value_iter == 0
a == $item_value#slurp
#else
 || a == $item_value#slurp
#end if
#set $value_iter = $value_iter + 1
#end if
#end for
, static_cast<t>(a));
#else
    FW_ASSERT(a >= 0 && a <= $max_value, static_cast<t>(a));
#end if
    this->e = static_cast<t>(a);
    return *this;
  }
  
  bool ${name} :: operator==(const ${name}& other) const
  {
    return this->e == other.e;
  }
  
  bool ${name} :: operator!=(const ${name}& other) const
  {
    return !(*this == other);
  }
  
\#ifdef BUILD_UT
  std::ostream& operator<<(std::ostream& os, const ${name}& obj) {
    os << "${name}::";
    const ${name}::t e = obj.e;
    switch (e) {
#for $item_name,$item_value,$item_comment in $items_list:
        case ${name}::${item_name}:
          os << "${item_name}";
          break;
#end for
        default:
          os << "[invalid]";
          break;
    }
    os << " (" << e << ")";
    return os;
  }
\#endif
  
  Fw::SerializeStatus ${name} :: serialize(Fw::SerializeBufferBase& buffer) const
  {
    Fw::SerializeStatus status;
    status = buffer.serialize(static_cast<FwEnumStoreType>(this->e));
    return status;
  }
  
  Fw::SerializeStatus ${name} :: deserialize(Fw::SerializeBufferBase& buffer)
  {
    Fw::SerializeStatus status;
    FwEnumStoreType es;
    status = buffer.deserialize(es);
    if (status == Fw::FW_SERIALIZE_OK)
      this->e = static_cast<t>(es);
    return status;
  }
}
