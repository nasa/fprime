##
## Template to stamp out serializable enums .hpp file
##
#import re
// ======================================================================
// \title  ${name}.hpp
// \author Auto-generated
// \brief  hpp file for ${name}
//
// NOTE: this file was automatically generated
//
// ======================================================================

\#ifndef ${namespace}_${name}_HPP
\#define ${namespace}_${name}_HPP

\#include "Fw/Types/String.hpp"
\#include "Fw/Types/BasicTypes.hpp"
\#include "Fw/Types/Serializable.hpp"

#if $namespace
namespace ${namespace} {
#end if
#if $comment
  //! $re.sub("\n *", "\n  //! ", $comment)
#end if
  class ${name} : public Fw::Serializable
  {
    public:
    // ----------------------------------------------------------------------
    // Types
    // ----------------------------------------------------------------------

    typedef enum {
#for $item_name,$item_value,$item_comment in $items_list:
#if not $item_value == ""
#if not item_comment == ""
    ${item_name} = ${item_value}, //!< ${item_comment}
#else
    ${item_name} = ${item_value},
#end if
#else
#if not item_comment == ""
    ${item_name}, //!< ${item_comment}
#else
    ${item_name},
#end if
#end if
#end for
        } t;

    public:

    // ----------------------------------------------------------------------
    // Constants
    // ----------------------------------------------------------------------

    enum {
#if $serialize_type
        SERIALIZED_SIZE = sizeof(${serialize_type})
#else
        SERIALIZED_SIZE = sizeof(FwEnumStoreType)
#end if
        };

    //! Number of items in ${name} enum
    static const U32 NUM_CONSTANTS = ${len($items_list)};

    public:

    // ----------------------------------------------------------------------
    // Constructors
    // ----------------------------------------------------------------------

    //! Construct ${name} object with default initialization
    ${name}();

    //! Construct ${name} object and initialize its value
    ${name}(
        const t e //!< The enum value
        );

    //! Copy constructor
    ${name}(
        const ${name}& other //!< The other object
        );

    public:

    // ----------------------------------------------------------------------
    // Operators
    // ----------------------------------------------------------------------

    //! Assignment operator
    ${name}& operator=(
        const ${name}& other //!< The other object
        );

    //! Assignment operator
    ${name}& operator=(
        const t a //!< The enumerated constant to copy
        );

    //! Assignment operator
    ${name}& operator=(
        const NATIVE_INT_TYPE a //!< The integer to copy
        );

    //! Assignment operator
    ${name}& operator=(
        const NATIVE_UINT_TYPE a //!< The integer to copy
        );

    //! Equality operator
    bool operator==(
        const ${name}& other //!< The other object
        ) const;

    //! Inequality operator
    bool operator!=(
        const ${name}& other //!< The other object
        ) const;

\#ifdef BUILD_UT
    //! Ostream operator for ${name} object
    friend std::ostream& operator<<(
        std::ostream& os, //!< The ostream
        const ${name}& obj //!< The object
        );
\#endif

    public:

    // ----------------------------------------------------------------------
    // Methods
    // ----------------------------------------------------------------------

    //! Serialization
    Fw::SerializeStatus serialize(
        Fw::SerializeBufferBase& buffer //!< The serial buffer
        ) const;

    //! Deserialization
    Fw::SerializeStatus deserialize(
        Fw::SerializeBufferBase& buffer //!< The serial buffer
        );

\#if FW_SERIALIZABLE_TO_STRING || BUILD_UT
    //! ENUM toString
    void toString(Fw::StringBase& text) const;  //!< generate text from serializable
\#endif

    public:

    // ----------------------------------------------------------------------
    // Member variables
    // ----------------------------------------------------------------------

    //! The enumeration value
    t e;
  };
#if $namespace
}
#end if
#endif
