##
## Template to stamp out serializable enums .hpp file
##
// ====================================================================== 
// \title  ${name}.hpp
// \author Auto-generated
// \brief  hpp file for ${name}
//
// \copyright
// Copyright (C) 2018 California Institute of Technology.
// ALL RIGHTS RESERVED.  United States Government Sponsorship
// acknowledged. Any commercial use must be negotiated with the Office
// of Technology Transfer at the California Institute of Technology.
// 
// This software may be subject to U.S. export control laws and
// regulations.  By accepting this document, the user agrees to comply
// with all U.S. export laws and regulations.  User has the
// responsibility to obtain export licenses, or other export authority
// as may be required before exporting such information to foreign
// countries or providing access to foreign persons.
// ======================================================================

\#ifndef ${namespace}_${name}_HPP
\#define ${namespace}_${name}_HPP

\#include "Fw/Types/BasicTypes.hpp"
\#include "Fw/Types/Serializable.hpp"
// To add include directives here, put them in a file called Include/${name}EnumAc.hpp

namespace ${namespace} {
  class ${name} : public Fw::Serializable
  {
    public:
    // ----------------------------------------------------------------------
    // Types
    // ----------------------------------------------------------------------

    typedef enum {
#for $item_name,$item_value,$item_comment in $items_list:
#if not $item_value == ""
#if not item_comment == ""
    ${item_name} = ${item_value}, //!< ${item_comment}
#else
    ${item_name} = ${item_value},
#end if
#else
#if not item_comment == ""
    ${item_name}, //!< ${item_comment}
#else
    ${item_name},
#end if
#end if
#end for
        } t;
  
    public:
  
    // ----------------------------------------------------------------------
    // Constants
    // ----------------------------------------------------------------------

    enum {
        SERIALIZED_SIZE = sizeof(FwEnumStoreType)
        };

    public:

    // ----------------------------------------------------------------------
    // Constructors
    // ----------------------------------------------------------------------

    //! Construct ${name} object with default initialization
    ${name}(void);

    //! Construct ${name} object and initialize its value
    ${name}(
        const t e //!< The enum value
        );

    //! Copy constructor
    ${name}(
        const ${name}& other //!< The other object
        );
  
    public:
  
    // ----------------------------------------------------------------------
    // Operators
    // ----------------------------------------------------------------------
  
    //! Assignment operator
    const ${name}& operator=(
        const ${name}& other //!< The other object
        );
  
    //! Assignment operator
    const ${name}& operator=(
        const NATIVE_INT_TYPE a //!< The integer to copy
        );
  
    //! Assignment operator
    const ${name}& operator=(
        const NATIVE_UINT_TYPE a //!< The integer to copy
        );
  
    //! Equality operator
    bool operator==(
        const ${name}& other //!< The other object
        ) const;
  
    //! Inequality operator
    bool operator!=(
        const ${name}& other //!< The other object
        ) const;
  
\#ifdef BUILD_UT
    //! Ostream operator for ${name} object
    friend std::ostream& operator<<(
        std::ostream& os, //!< The ostream
        const ${name}& obj //!< The object
        );
\#endif
  
    public:
  
    // ----------------------------------------------------------------------
    // Methods
    // ----------------------------------------------------------------------
  
    //! Serialization
    Fw::SerializeStatus serialize(
        Fw::SerializeBufferBase& buffer //!< The serial buffer
        ) const;
  
    //! Deserialization
    Fw::SerializeStatus deserialize(
        Fw::SerializeBufferBase& buffer //!< The serial buffer
        );
  
    public:
  
    // ----------------------------------------------------------------------
    // Member variables
    // ----------------------------------------------------------------------
  
    //! The enumeration value
    t e;
  };
}
#endif
