// ======================================================================
// \title  ${name}.cpp
// \author $user
// \brief  cpp file for ${name} component implementation class
// ======================================================================


\#include <${include_path}/${name}.hpp>
\#include <FpConfig.hpp>

#if $namespace_list != None
  #for $namespace in $namespace_list
namespace ${namespace} {
  #end for
#end if

  // ----------------------------------------------------------------------
  // Construction, initialization, and destruction
  // ----------------------------------------------------------------------

  ${name} ::
    ${name}(
$emit_non_port_params([ $param_compName ])
    ) : ${component_base}(compName)
  {

  }

  ${name} ::
    ~${name}()
  {

  }

#if len($typed_user_input_ports) > 0:
  // ----------------------------------------------------------------------
  // Handler implementations for user-defined typed input ports
  // ----------------------------------------------------------------------

  #for $instance, $type, $sync, $priority, $full, $role, $max_num in $typed_user_input_ports:
  #set $return_type = $port_return_type_strs[$instance]
  ${return_type}${name} ::
    ${instance}_handler(
$emit_port_params([ $param_portNum ] + $port_params[instance])
    )
  {
    #if $return_type[:-1] == "void":
    // TODO
    #else:
    // TODO return
    #end if
  }

  #end for
#end if
#if len($serial_input_ports) > 0:
  // ----------------------------------------------------------------------
  // Handler implementations for user-defined serial input ports
  // ----------------------------------------------------------------------

  #for $instance, $sync, $priority, $full, $max_num in $serial_input_ports:
  void ${name} ::
    ${instance}_handler(
        NATIVE_INT_TYPE portNum, $doxygen_post_comment("The port number")
        Fw::SerializeBufferBase &Buffer $doxygen_post_comment("The serialization buffer")
    )
  {
    // TODO
  }

  #end for
#end if
#if $has_commands:
  // ----------------------------------------------------------------------
  // Command handler implementations
  // ----------------------------------------------------------------------

  #for $mnemonic, $opcode, $sync, $priority, $full, $comment in $commands:
    #set $params = $command_params[$mnemonic]
  void ${name} ::
    ${mnemonic}_cmdHandler(
$emit_non_port_params([ $param_opCode, $param_cmdSeq ] + $params)
    )
  {
    // TODO
    this->cmdResponse_out(opCode,cmdSeq,Fw::CmdResponse::OK);
  }

  #end for
#end if
#if $namespace_list != None
  #for $namespace in $reversed($namespace_list)
} // end namespace $namespace
  #end for
#end if
