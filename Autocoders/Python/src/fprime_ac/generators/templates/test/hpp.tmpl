// ======================================================================
// \title  ${name}/test/ut/TesterBase.hpp
// \author Auto-generated
// \brief  hpp file for ${name} component test harness base class
//
// NOTE: this file was automatically generated
//
// ======================================================================

\#ifndef ${name}_TESTER_BASE_HPP
\#define ${name}_TESTER_BASE_HPP

\#include <${comp_include_path}/${include_name}ComponentAc.hpp>
\#include <Fw/Types/Assert.hpp>
\#include <Fw/Comp/PassiveComponentBase.hpp>
\#include <cstdio>
\#include <Fw/Port/InputSerializePort.hpp>

#if $namespace_list != None
  #for $namespace in $namespace_list
namespace ${namespace} {
  #end for
#end if

  //! \class $tester_base
  //! \brief Auto-generated base class for ${name} component test harness
  //!
  class $tester_base :
    public Fw::PassiveComponentBase
  {

    public:

      // ----------------------------------------------------------------------
      // Initialization
      // ----------------------------------------------------------------------

      //! Initialize object $tester_base
      //!
      virtual void init(
$emit_hpp_params([ $param_instance_default_zero ])
      );

#if $has_input_ports:
    public:

      // ----------------------------------------------------------------------
      // Connectors for 'to' ports
      // Connect these output ports to the input ports under test
      // ----------------------------------------------------------------------

  #for $instance, $type, $sync, $priority, $full, $role, $max_num in $input_ports:
    #set $param_port = $get_param_port($instance, $type)
      //! Connect $instance to to_${instance}[portNum]
      //!
      void connect_to_${instance}(
$emit_hpp_params([ $param_portNum, $param_port ])
      );

  #end for
#end if
#if $has_output_ports:
    public:

      // ----------------------------------------------------------------------
      // Getters for 'from' ports
      // Connect these input ports to the output ports under test
      // ----------------------------------------------------------------------

  #for $instance, $type, $sync, $priority, $role, $max_num in $output_ports:
    #if $role == "LogTextEvent":
\#if FW_ENABLE_TEXT_LOGGING == 1
    #end if
    #set $namespace = $port_namespaces[$type]
      //! Get the port that receives input from $instance
      //!
      //! \return from_${instance}[portNum]
      //!
    #if $type == "Serial":
      ${namespace}::InputSerializePort* get_from_${instance}(
    #else
      ${namespace}::Input${type}Port* get_from_${instance}(
    #end if
$emit_hpp_params([ $param_portNum ])
      );
    #if $role == "LogTextEvent":
\#endif
    #end if

  #end for
#end if
    protected:

      // ----------------------------------------------------------------------
      // Construction and destruction
      // ----------------------------------------------------------------------

      //! Construct object $tester_base
      //!
      ${tester_base}(
$emit_hpp_params([ $param_compName, $param_maxHistorySize ])
      );

      //! Destroy object $tester_base
      //!
      virtual ~${tester_base}();

#if $has_output_ports:
      // ----------------------------------------------------------------------
      // Test history
      // ----------------------------------------------------------------------

    protected:

      //! \class History
      //! \brief A history of port inputs
      //!
      template <typename T> class History {

        public:

          //! Create a History
          //!
          History(
              const U32 maxSize $doxygen_post_comment("The maximum history size")
          ) :
              numEntries(0),
              maxSize(maxSize)
          {
            this->entries = new T[maxSize];
          }

          //! Destroy a History
          //!
          ~History() {
            delete[] this->entries;
          }

          //! Clear the history
          //!
          void clear() { this->numEntries = 0; }

          //! Push an item onto the history
          //!
          void push_back(
              T entry $doxygen_post_comment("The item")
          ) {
            FW_ASSERT(this->numEntries < this->maxSize);
            entries[this->numEntries++] = entry;
          }

          //! Get an item at an index
          //!
          //! \return The item at index i
          //!
          T at(
              const U32 i $doxygen_post_comment("The index")
          ) const {
            FW_ASSERT(i < this->numEntries);
            return entries[i];
          }

          //! Get the number of entries in the history
          //!
          //! \return The number of entries in the history
          //!
          U32 size() const { return this->numEntries; }

        private:

          //! The number of entries in the history
          //!
          U32 numEntries;

          //! The maximum history size
          //!
          const U32 maxSize;

          //! The entries
          //!
          T *entries;

      };

      //! Clear all history
      //!
      void clearHistory();

#end if
#if len($typed_user_output_ports) > 0:
    protected:

      // ----------------------------------------------------------------------
      // Handler prototypes for typed from ports
      // ----------------------------------------------------------------------

  #for $instance, $type, $sync, $priority, $role, $max_num in $typed_user_output_ports:
    #set $params = $port_params[$instance]
    #set $return_type = $port_return_type_strs[$instance]
      //! Handler prototype for from_${instance}
      //!
      virtual ${return_type}from_${instance}_handler(
$emit_hpp_port_params([ $param_portNum ] + $params)
      ) = 0;

      //! Handler base function for from_${instance}
      //!
      ${return_type}from_${instance}_handlerBase(
$emit_hpp_port_params([ $param_portNum ] + $params)
      );

  #end for
#end if
#if len($typed_user_output_ports) > 0:
    protected:

      // ----------------------------------------------------------------------
      // Histories for typed from ports
      // ----------------------------------------------------------------------

      //! Clear from port history
      //!
      void clearFromPortHistory();

      //! The total number of from port entries
      //!
      U32 fromPortHistorySize;

  #for $instance, $type, $sync, $priority, $role, $max_num in $typed_user_output_ports:
    #set $params = $port_params[$instance]
      //! Push an entry on the history for from_${instance}
      void pushFromPortEntry_${instance}(
$emit_hpp_port_params($params)
      );

    #if len($params) > 0:
      //! A history entry for from_${instance}
      //!
      typedef struct {
      #for $param_name, $param_type, $param_comment, $param_modifier, $param_enum, $non_const_arg_type in $params:
        #if $param_modifier in ('*')
          $non_const_arg_type $param_modifier${param_name};
        #else
          $non_const_arg_type ${param_name};
        #end if
      #end for
      } FromPortEntry_${instance};

      //! The history for from_${instance}
      //!
      History<FromPortEntry_${instance}>
        *fromPortHistory_${instance};

    #else:
      //! Size of history for from_${instance}
      //!
      U32 fromPortHistorySize_${instance};

    #end if
  #end for
#end if
#if len($serial_output_ports) > 0:
    protected:

      // ----------------------------------------------------------------------
      // Handler prototypes for serial from ports
      // ----------------------------------------------------------------------

  #for $instance, $sync, $priority, $max_num in $serial_output_ports:
      //! Handler prototype for from_${instance}
      //!
      virtual void from_${instance}_handler(
        NATIVE_INT_TYPE portNum, $doxygen_post_comment("The port number")
        Fw::SerializeBufferBase &Buffer $doxygen_post_comment("The serialization buffer")
      ) = 0;

      //! Handler base class function prototype for from_${instance}
      //!
      void from_${instance}_handlerBase (
        NATIVE_INT_TYPE portNum, $doxygen_post_comment("The port number")
        Fw::SerializeBufferBase &Buffer $doxygen_post_comment("The serialization buffer")
      );

  #end for

#end if
#set $invocation_ports = [ \
  ($instance, $type) \
  for $instance, $type, $direction, $role in $ports \
  if $direction == "Input" and $role != "Cmd"
]
#if len($invocation_ports) > 0:
    protected:

      // ----------------------------------------------------------------------
      // Invocation functions for to ports
      // ----------------------------------------------------------------------

  #for $instance, $type in $invocation_ports:
    #set $return_type = $port_return_type_strs[$instance]
      //! Invoke the to port connected to $instance
      //!
    #if $type == "Serial":
      ${return_type}invoke_to_${instance}(
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::SerializeBufferBase& Buffer
      );
    #else
      ${return_type}invoke_to_${instance}(
$emit_hpp_port_params([ $param_portNum ] + $port_params[$instance])
      );
    #end if

  #end for
#end if
#if $has_ports:
    public:

      // ----------------------------------------------------------------------
      // Getters for port counts
      // ----------------------------------------------------------------------

  #for $instance, $type, $direction, $role in $ports:
    #if $direction == "Input":
      //! Get the number of to_$instance ports
      //!
      //! \return The number of to_${instance} ports
      //!
      NATIVE_INT_TYPE getNum_to_${instance}() const;

    #end if
    #if $direction == "Output":
      #if $role == 'LogTextEvent':
\#if FW_ENABLE_TEXT_LOGGING == 1
      #end if
      //! Get the number of from_${instance} ports
      //!
      //! \return The number of from_${instance} ports
      //!
      NATIVE_INT_TYPE getNum_from_${instance}() const;
      #if $role == 'LogTextEvent':
\#endif
      #end if

    #end if
  #end for
#end if
#if $has_input_ports:
    protected:

      // ----------------------------------------------------------------------
      // Connection status for to ports
      // ----------------------------------------------------------------------

  #for $instance, $type, $sync, $priority, $full, $role, $max_num in $input_ports:
      //! Check whether port is connected
      //!
      //! Whether to_${instance}[portNum] is connected
      //!
      bool isConnected_to_${instance}(
$emit_hpp_params([ $param_portNum ])
      );

  #end for
#end if
#if $has_commands or $has_parameters:
      // ----------------------------------------------------------------------
      // Functions for sending commands
      // ----------------------------------------------------------------------

    protected:

      // send command buffers directly - used for intentional command encoding errors
      void sendRawCmd(FwOpcodeType opcode, U32 cmdSeq, Fw::CmdArgBuffer& args);

  #for $mnemonic, $opcode, $sync, $priority, $full, $comment in $commands:
      //! Send a $mnemonic command
      //!
      void sendCmd_${mnemonic}(
$emit_hpp_params([ $param_instance, $param_cmdSeq ] + $get_command_params($mnemonic))
      );

  #end for
#end if
#if $has_commands or $has_parameters
    protected:

      // ----------------------------------------------------------------------
      // Command response handling
      // ----------------------------------------------------------------------

      //! Handle a command response
      //!
      virtual void cmdResponseIn(
$emit_hpp_params([ $param_opCode, $param_cmdSeq, $param_response ])
      );

      //! A type representing a command response
      //!
      typedef struct {
        FwOpcodeType opCode;
        U32 cmdSeq;
        Fw::CmdResponse response;
      } CmdResponse;

      //! The command response history
      //!
      History<CmdResponse> *cmdResponseHistory;

#end if
#if $has_events
    protected:

      // ----------------------------------------------------------------------
      // Event dispatch
      // ----------------------------------------------------------------------

      //! Dispatch an event
      //!
      void dispatchEvents(
$emit_hpp_params([ $param_event_id, $param_timeTag, $param_log_severity, $param_args ])
      );

      //! Clear event history
      //!
      void clearEvents();

      //! The total number of events seen
      //!
      U32 eventsSize;

\#if FW_ENABLE_TEXT_LOGGING

    protected:

      // ----------------------------------------------------------------------
      // Text events
      // ----------------------------------------------------------------------

      //! Handle a text event
      //!
      virtual void textLogIn(
$emit_hpp_params([ $param_event_id, $param_timeTag, $param_log_severity, $param_text ])
      );

      //! A history entry for the text log
      //!
      typedef struct {
        U32 id;
        Fw::Time timeTag;
        Fw::LogSeverity severity;
        Fw::TextLogString text;
      } TextLogEntry;

      //! The history of text log events
      //!
      History<TextLogEntry> *textLogHistory;

      //! Print a text log history entry
      //!
      static void printTextLogHistoryEntry(
          const TextLogEntry& e,
          FILE* file
      );

      //! Print the text log history
      //!
      void printTextLogHistory(FILE *const file);

\#endif

#end if
#for $ids, $event_name, $severity, $format_string, $throttle, $comment in $events:
    protected:

      // ----------------------------------------------------------------------
      // Event: ${event_name}
      // ----------------------------------------------------------------------

      //! Handle event $event_name
      //!
  #set $params = $get_event_params($event_name)
      virtual void logIn_${severity}_${event_name}(
$emit_hpp_params($params)
      );

  #if len($params) > 0:
      //! A history entry for event $event_name
      //!
      typedef struct {
    #for $arg_name, $arg_type, $arg_comment, $arg_typeinfo in $params:
      #if $arg_typeinfo == "string":
        Fw::LogStringArg ${arg_name};
      #else
        $arg_type ${arg_name};
      #end if
    #end for
      } EventEntry_${event_name};

      //! The history of $event_name events
      //!
      History<EventEntry_${event_name}>
        *eventHistory_${event_name};

  #else:
      //! Size of history for event $event_name
      //!
      U32 eventsSize_${event_name};

  #end if
#end for
#if $has_telemetry
    protected:

      // ----------------------------------------------------------------------
      // Telemetry dispatch
      // ----------------------------------------------------------------------

      //! Dispatch telemetry
      //!
      void dispatchTlm(
$emit_hpp_params([ $param_tlm_id, $param_const_timeTag, $param_val ])
      );

      //! Clear telemetry history
      //!
      void clearTlm();

      //! The total number of telemetry inputs seen
      //!
      U32 tlmSize;

#end if
#for $ids, $name, $type, $size, $update, $comment, $typeinfo in $channels:
    protected:

      // ----------------------------------------------------------------------
      // Channel: $name
      // ----------------------------------------------------------------------

  #set $param_val = $get_param_val_Tlm($type, $typeinfo)
      //! Handle channel $name
      //!
      virtual void tlmInput_${name}(
$emit_hpp_params([ $param_const_timeTag, $param_val ])
      );

      //! A telemetry entry for channel $name
      //!
      typedef struct {
        Fw::Time timeTag;
        $get_tlm_type($type, $typeinfo) arg;
      } TlmEntry_${name};

      //! The history of $name values
      //!
      History<TlmEntry_${name}>
        *tlmHistory_${name};

#end for
#if $has_telemetry or $has_events or $has_time_get
    protected:

      // ----------------------------------------------------------------------
      // Test time
      // ----------------------------------------------------------------------

      //! Set the test time for events and telemetry
      //!
      void setTestTime(
$emit_hpp_params([ $param_const_timeTag ])
      );

#end if
#for $ids, $name, $type, $osets, $osaves, $size, $default, $comment, $typeinfo in $parameters:
    protected:

      // ----------------------------------------------------------------------
      // Parameter: $name
      // ----------------------------------------------------------------------

  #set $param_val = $get_param_val_Param($type, $typeinfo)
      void paramSet_${name}(
$emit_hpp_params([ $param_val, $param_valid ])
      );

      void paramSend_${name}(
$emit_hpp_params([ $param_instance, $param_cmdSeq ])
      );

      void paramSave_${name}(
$emit_hpp_params([ $param_instance, $param_cmdSeq ])
      );

#end for
#if $has_input_ports
    private:

      // ----------------------------------------------------------------------
      // To ports
      // ----------------------------------------------------------------------

  #for $instance, $type, $sync, $priority, $full, $role, $max_num in $input_ports:
      //! To port connected to ${instance}
      //!
    #if $type == "Serial"
      Fw::OutputSerializePort m_to_${instance}[$max_num];
    #else:
      $port_namespaces[$type]::Output${type}Port m_to_${instance}[$max_num];
    #end if

  #end for
#end if
#if $has_output_ports:
    private:

      // ----------------------------------------------------------------------
      // From ports
      // ----------------------------------------------------------------------

  #for $instance, $type, $sync, $priority, $role, $max_num in $output_ports:
    #if $role == "LogTextEvent":
\#if FW_ENABLE_TEXT_LOGGING == 1
    #end if
      //! From port connected to ${instance}
      //!
    #if $type == "Serial"
      Fw::InputSerializePort m_from_${instance}[$max_num];
    #else:
      $port_namespaces[$type]::Input${type}Port m_from_${instance}[$max_num];
    #end if
    #if $role == "LogTextEvent":
\#endif
    #end if

  #end for
#end if
#if $has_output_ports:
    private:

      // ----------------------------------------------------------------------
      // Static functions for output ports
      // ----------------------------------------------------------------------

  #for $instance, $type, $sync, $priority, $role, $max_num in $output_ports:
    #if $role == "LogTextEvent":
\#if FW_ENABLE_TEXT_LOGGING == 1
    #end if
    #set $params = $port_params[$instance]
    #set $return_type = $port_return_type_strs[$instance]
      //! Static function for port from_${instance}
      //!
    #if $type == "Serial"
      static ${return_type}from_${instance}_static(
          Fw::PassiveComponentBase *const callComp, //!< The component instance
          const NATIVE_INT_TYPE portNum, //!< The port number
          Fw::SerializeBufferBase& Buffer //!< serialized data buffer
      );
    #else
      static ${return_type}from_${instance}_static(
$emit_hpp_port_params([ $param_callComp, $param_portNum] + $params)
      );
    #end if
    #if $role == 'LogTextEvent':
\#endif
    #end if

  #end for
#end if
#if $has_telemetry or $has_events or $has_time_get
    private:

      // ----------------------------------------------------------------------
      // Test time
      // ----------------------------------------------------------------------

      //! Test time stamp
      //!
      Fw::Time m_testTime;

#end if
#if $has_parameters:
    private:

      // ----------------------------------------------------------------------
      // Parameter validity flags
      // ----------------------------------------------------------------------

  #for $ids, $name, $type, $osets, $osaves, $size, $default, $comment, $typeinfo in $parameters:
      //! True if parameter $name was successfully received
      //!
      Fw::ParamValid m_param_${name}_valid;

  #end for
    private:

      // ----------------------------------------------------------------------
      // Parameter variables
      // ----------------------------------------------------------------------

  #for $ids, $name, $type, $osets, $osaves, $size, $default, $comment, $typeinfo in $parameters:
      //! Parameter $name
      //!
      $get_param_type($type, $typeinfo) m_param_${name};

  #end for
#end if
  };

#if $namespace_list != None
  #for $namespace in $reversed($namespace_list)
} // end namespace $namespace
  #end for
#end if

\#endif
