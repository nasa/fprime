##
## Template to stamp out serializable arrays .hpp file
##
#import re
// ======================================================================
// \title  ${name}.hpp
// \author Auto-generated
// \brief  hpp file for ${name}
//
// NOTE: this file was automatically generated
//
// ======================================================================


\#ifndef ${namespace.upper().replace("::", "_")}_${name.upper()}_HPP_
\#define ${namespace.upper().replace("::", "_")}_${name.upper()}_HPP_

\#include "Fw/Types/String.hpp"
\#include <FpConfig.hpp>
\#include "Fw/Types/Serializable.hpp"
#for $t in $include_headers:
\#include <${t}>
#end for
#for $t in $import_serializables:
\#include <${t}>
#end for
#for $t in $import_enums:
\#include <${t}>
#end for
#for $t in $import_arrays:
\#include <${t}>
#end for

#if $namespace_list != None
 #for $namespace in $namespace_list
namespace ${namespace} {
 #end for
#end if
#if $comment
  //! $re.sub("\n *", "\n  //! ", $comment)
#end if
  class ${name} : public Fw::Serializable
  {
    public:
#if $type == "string":

    class ${name}String : public Fw::StringBase {
        public:

            enum {
                SERIALIZED_SIZE = ${string_size} + sizeof(FwBuffSizeType) //!<size of buffer + storage of two size words
            };

            ${name}String(const char* src); //!< char array constructor
            ${name}String(const Fw::StringBase& src); //!< string base constructor
            ${name}String(const ${name}String& src); //!< string base constructor
            ${name}String(); //!< default constructor
            ${name}String& operator=(const ${name}String& other); //!< assignment operator
            ${name}String& operator=(const Fw::StringBase& other); //!< other string assignment operator
            ${name}String& operator=(const char* other); //!< char* assignment operator
            ~${name}String(); //!< destructor

            const char* toChar() const; //!< retrieves char buffer of string
            NATIVE_UINT_TYPE getCapacity() const;

        private:

            char m_buf[${string_size}]; //!< buffer for string storage
    };

#end if

    // ----------------------------------------------------------------------
    // Helper Types
    // ----------------------------------------------------------------------

#if $type == "string":
    typedef ${name}String ElementType;
#else:
    typedef ${type} ElementType;
#end if

    enum {
        SIZE=${size},
        SERIALIZED_SIZE = SIZE *
#if $type == 'string':
        ${name}String::SERIALIZED_SIZE
#else if $typeinfo == 'extern':
        ${type}::SERIALIZED_SIZE
#else if $type == 'ENUM':
        sizeof(FwEnumStoreType)
#else:
        sizeof($type)
#end if
    }; //!< serializable size of ${name}

    public:

    // ----------------------------------------------------------------------
    // Constructors
    // ----------------------------------------------------------------------

      //! Construct a ${name} with default initialization
      ${name}();

      //! Construct a ${name} and initialize its elements from an array
      ${name}(
          const ElementType (&a)[SIZE] //!< The array
      );

 #if $size != 1:
      //! Construct a ${name} and initialize its elements from a single element
      ${name}(
          const ElementType& e //!< The element
      );
#end if

      //! Construct a ${name} and initialize its elements from elements
   ${name}(
#for $i in $range(1, $size + 1):
#if $i != $size:
      const ElementType (&e${i}), //!< Element ${i}
#else:
      const ElementType (&e${i})
#end if
#end for
      );

      //! Copy constructor
      ${name}(
          const ${name}& other //!< The other object
      );

    public:

      // ----------------------------------------------------------------------
      // Public operators
      // ----------------------------------------------------------------------

      //! Subscript operator
      ElementType& operator[](
          const U32 i //!< The subscript index
      );

      //! Const subscript operator
      const ElementType& operator[](
          const U32 i //!< The subscript index
      ) const;

      //! Assignment operator
      ${name}& operator=(
          const ${name}& other //!< The other object
      );

      //! Assignment operator from array
      ${name}& operator=(
          const ElementType (&a)[SIZE] //!< The array
      );

      //! Assignment operator from element
      ${name}& operator=(
          const ElementType& e //!< The element
      );

      //! Equality operator
      bool operator==(
          const ${name}& other //!< The other object
      ) const;

      //! Inequality operator
      bool operator!=(
          const ${name}& other //!< The other object
      ) const;

\#ifdef BUILD_UT
      //! Ostream operator
      friend std::ostream& operator<<(
          std::ostream& os, //!< The ostream
          const ${name}& obj //!< The object
      );
\#endif

    public:

    // ----------------------------------------------------------------------
    // Public methods
    // ----------------------------------------------------------------------

    //! Serialization
    Fw::SerializeStatus serialize(
        Fw::SerializeBufferBase& buffer //!< The serial buffer
    ) const;

    //! Deserialization
    Fw::SerializeStatus deserialize(
        Fw::SerializeBufferBase& buffer //!< The serial buffer
    );

\#if FW_ARRAY_TO_STRING || BUILD_UT
    void toString(Fw::StringBase& text) const; //!< generate text from serializable
\#endif

    protected:

    enum {
        TYPE_ID = ${uuid} //!< type id
    };

    private:

    // ----------------------------------------------------------------------
    // Private member variables
    // ----------------------------------------------------------------------

    //! The array elements
    ElementType elements[SIZE];

  };

#if $namespace_list != None
 #for $namespace in $reversed($namespace_list)
} // end namespace $namespace
 #end for
#end if

#endif
