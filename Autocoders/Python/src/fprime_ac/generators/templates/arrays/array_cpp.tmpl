##
## Template to stamp out serializable arrays .cpp file
##
// ======================================================================
// \title  ${name}
// \author Auto-generated
// \brief  cpp file for ${name}
//
// \copyright
// Copyright 2020 California Institute of Technology.
// ALL RIGHTS RESERVED.  United States Government Sponsorship
// acknowledged. Any commercial use must be negotiated with the Office
// of Technology Transfer at the California Institute of Technology.
//
// This software may be subject to U.S. export control laws and
// regulations.  By accepting this document, the user agrees to comply
// with all U.S. export laws and regulations.  User has the
// responsibility to obtain export licenses, or other export authority
// as may be required before exporting such information to foreign
// countries or providing access to foreign persons.
// ======================================================================

\#include <string.h>
\#include <stdio.h>

\#include "Fw/Types/Assert.hpp"

\#include "${name}ArrayAc.hpp"

#if $namespace
namespace ${namespace} {
#end if

#if $type == "string":

    ${name}::${name}String::${name}String(const char* src): StringBase() {
        this->copyBuff(src,this->getCapacity());
    }

    ${name}::${name}String::${name}String(const Fw::StringBase& src): StringBase() {
        this->copyBuff(src.toChar(),this->getCapacity());
    }

    ${name}::${name}String::${name}String(const ${name}String& src): StringBase() {
        this->copyBuff(src.toChar(),this->getCapacity());
    }

    ${name}::${name}String::${name}String(void): StringBase() {
        this->m_buf[0] = 0;
    }

    ${name}::${name}String::~${name}String(void) {
    }

    bool ${name}::${name}String::operator==(const ${name}String& src) const {
        return (0 == strncmp(this->m_buf,src.m_buf,sizeof(this->m_buf)));
    }

    NATIVE_UINT_TYPE ${name}::${name}String::length(void) const {
        return (NATIVE_UINT_TYPE)strnlen(this->m_buf,sizeof(this->m_buf));
    }

    const char* ${name}::${name}String::toChar(void) const {
        return this->m_buf;
    }

    Fw::SerializeStatus ${name}::${name}String::serialize(Fw::SerializeBufferBase& buffer) const {
        NATIVE_UINT_TYPE strSize = strnlen(this->m_buf,sizeof(this->m_buf));
        // serialize string
        return buffer.serialize((U8*)this->m_buf,strSize);
    }

    Fw::SerializeStatus ${name}::${name}String::deserialize(Fw::SerializeBufferBase& buffer) {
        NATIVE_UINT_TYPE maxSize = sizeof(this->m_buf);
        // deserialize string
        Fw::SerializeStatus stat = buffer.deserialize((U8*)this->m_buf,maxSize);
        // make sure it is null-terminated
        this->terminate(maxSize);

        return stat;
    }

    NATIVE_UINT_TYPE ${name}::${name}String::getCapacity(void) const {
        return sizeof(this->m_buf);
    }

    void ${name}::${name}String::terminate(NATIVE_UINT_TYPE size) {
        // null terminate the string
        this->m_buf[size < sizeof(this->m_buf)?size:sizeof(this->m_buf)-1] = 0;
    }

    const ${name}::${name}String& ${name}::${name}String::operator=(const ${name}::${name}String& other) {
        this->copyBuff(other.m_buf,this->getCapacity());
        return *this;
    }

#end if

  // ----------------------------------------------------------------------
  // Constructors
  // ----------------------------------------------------------------------

  ${name} ::
    ${name}(void) :
      Serializable()
  {
    *this = ${name}(
  #set $i = 1
  #for $element in $default:
  #if $i != len($default):
  #slurp
      $element,
  #else:
  #slurp
      $element);
  #end if
  #set $i = $i + 1
  #end for
  }

  ${name} ::
    ${name}(const ElementType (&a)[SIZE]) :
      Serializable()
  {
    for(U32 index = 0; index < SIZE; index++)
    {
      this->elements[index] = a[index];
    }
  }

  #if $size != 1:
  ${name} ::
    ${name}(const ElementType& e) :
      Serializable()
  {
    for(U32 index = 0; index < SIZE; index++)
    {
      this->elements[index] = e;
    }
  }
  #end if

  ${name} ::
    ${name}(
#for $i in $range(1, $size + 1)
#if $i != $size:
      const ElementType (&e${i}), //!< Element ${i}
#else
      const ElementType (&e${i})
#end if
#end for
    ) :
      Serializable()
  {
#set $k = 0
#for $i in $range(1, $size + 1)
    this->elements[$k] = e${i};
#set $k = $k + 1
#end for
  }

  ${name} ::
    ${name}(const ${name}& other) :
      Serializable()
  {
    for(U32 index = 0; index < SIZE; index++)
    {
      this->elements[index] = other.elements[index];
    }
  }

  // ----------------------------------------------------------------------
  // Public functions
  // ----------------------------------------------------------------------


  ${name}::ElementType& ${name} ::
    operator[](const U32 i)
  {
    FW_ASSERT(i < SIZE);
    return this->elements[i];
  }

  const ${name}::ElementType& ${name} ::
    operator[](const U32 i) const
  {
    FW_ASSERT(i < SIZE);
    return this->elements[i];
  }


  const ${name}& ${name} ::
    operator=(const ${name}& other)
  {
    for(U32 index = 0; index < SIZE; index++) {
      this->elements[index] = other.elements[index];
    }
    return *this;
  }

  const ${name}& ${name} ::
    operator=(const ElementType (&a)[SIZE])
  {
    for(U32 index = 0; index < SIZE; index++) {
      this->elements[index] = a[index];
    }
    return *this;
  }

  const ${name}& ${name} ::
    operator=(const ElementType& e)
  {
    for(U32 index = 0; index < SIZE; index++) {
      this->elements[index] = e;
    }
    return *this;
  }

  bool ${name} ::
    operator==(const ${name}& other) const
  {
    for (U32 i = 0; i < SIZE; ++i) {
      if (!((*this)[i] == other[i])) {
        return false;
      }
    }
    return true;
  }

  bool ${name} ::
    operator!=(const ${name}& other) const
  {
    return !(*this == other);
  }

\#if FW_ARRAY_TO_STRING  || BUILD_UT

void ${name}::toString(Fw::StringBase& text) const {

    static const char * formatString = "[ "
#for $index in $range(0, $size):
#if $index != $size - 1:
      "${format}, "
#else:
      "${format} ]";
#end if
#end for

#if $typeinfo == "extern":
    // Need to instantiate toString for arrays and serializable types
#for $index in $range(0, $size):
    Fw::EightyCharString str${index};
    this->elements[$index].toString(str${index});
#end for
#end if

    // declare strings to hold any serializable toString() arguments

    char outputString[FW_ARRAY_TO_STRING_BUFFER_SIZE];
    (void)snprintf(outputString,FW_ARRAY_TO_STRING_BUFFER_SIZE,formatString
#for $index in $range(0, $size):
#if $type == "bool":
      ,this->elements[$index]?"T":"F"
#else if $type == "ENUM":
      ,(NATIVE_INT_TYPE)this->elements[$index]
#else if $typeinfo == "extern":
      ,str${index}.toChar()
#else if $type == "string":
      ,this->elements[$index].toChar()
#else:
      ,this->elements[$index]
#end if
#end for ## INDEX
    );
    outputString[FW_ARRAY_TO_STRING_BUFFER_SIZE-1] = 0; // NULL terminate

    text = outputString;
}

\#endif

\#ifdef BUILD_UT
  std::ostream& operator<<(std::ostream& os, const ${name}& obj) {
    Fw::EightyCharString temp;
    obj.toString(temp);

    os << temp;
    return os;
  }
\#endif

  Fw::SerializeStatus ${name} ::
    serialize(Fw::SerializeBufferBase& buffer) const
  {
    Fw::SerializeStatus status = Fw::FW_SERIALIZE_OK;
    for (U32 i = 0; i < SIZE; ++i) {
      status = buffer.serialize((*this)[i]);
      if (status != Fw::FW_SERIALIZE_OK) {
        return status;
      }
    }
    return status;
  }

  Fw::SerializeStatus ${name} ::
    deserialize(Fw::SerializeBufferBase& buffer)
  {
    Fw::SerializeStatus status = Fw::FW_SERIALIZE_OK;
    for (U32 i = 0; i < SIZE; ++i) {
      status = buffer.deserialize((*this)[i]);
      if (status != Fw::FW_SERIALIZE_OK) {
        return status;
      }
    }
    return status;
  }

#if $namespace
}
#end if
