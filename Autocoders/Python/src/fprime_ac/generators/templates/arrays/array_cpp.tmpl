##
## Template to stamp out serializable arrays .cpp file
##
// ======================================================================
// \title  ${name}
// \author Auto-generated
// \brief  cpp file for ${name}
//
// NOTE: this file was automatically generated
//
// ======================================================================

\#include <cstring>
\#include <cstdio>

\#include "Fw/Types/Assert.hpp"
\#include <Fw/Types/StringUtils.hpp>

\#include "${name}ArrayAc.hpp"

#if $namespace_list != None
 #for $namespace in $namespace_list
namespace ${namespace} {
 #end for
#end if

#if $type == "string":

    ${name}::${name}String::${name}String(const char* src): StringBase() {
        Fw::StringUtils::string_copy(this->m_buf, src, sizeof(this->m_buf));
    }

    ${name}::${name}String::${name}String(const Fw::StringBase& src): StringBase() {
        Fw::StringUtils::string_copy(this->m_buf, src.toChar(), sizeof(this->m_buf));
    }

    ${name}::${name}String::${name}String(const ${name}String& src): StringBase() {
        Fw::StringUtils::string_copy(this->m_buf, src.toChar(), sizeof(this->m_buf));
    }

    ${name}::${name}String::${name}String(): StringBase() {
        this->m_buf[0] = 0;
    }

    ${name}::${name}String& ${name}::${name}String::operator=(const ${name}String& other) {
        if(this == &other) {
            return *this;
        }

        Fw::StringUtils::string_copy(this->m_buf, other.toChar(), sizeof(this->m_buf));
        return *this;
    }

    ${name}::${name}String& ${name}::${name}String::operator=(const StringBase& other) {
        if(this == &other) {
            return *this;
        }

        Fw::StringUtils::string_copy(this->m_buf, other.toChar(), sizeof(this->m_buf));
        return *this;
    }

    ${name}::${name}String& ${name}::${name}String::operator=(const char* other) {
        Fw::StringUtils::string_copy(this->m_buf, other, sizeof(this->m_buf));
        return *this;
    }

    ${name}::${name}String::~${name}String() {
    }

    const char* ${name}::${name}String::toChar() const {
        return this->m_buf;
    }

    NATIVE_UINT_TYPE ${name}::${name}String::getCapacity() const {
        return sizeof(this->m_buf);
    }

#end if

  // ----------------------------------------------------------------------
  // Constructors
  // ----------------------------------------------------------------------

  ${name} ::
    ${name}() :
      Serializable()
  {
    *this = ${name}(
  #set $i = 1
  #for $element in $default:
  #if $i != len($default):
  #slurp
      $element,
  #else:
  #slurp
      $element);
  #end if
  #set $i = $i + 1
  #end for
  }

  ${name} ::
    ${name}(const ElementType (&a)[SIZE]) :
      Serializable()
  {
    for(U32 index = 0; index < SIZE; index++)
    {
      this->elements[index] = a[index];
    }
  }

  #if $size != 1:
  ${name} ::
    ${name}(const ElementType& e) :
      Serializable()
  {
    for(U32 index = 0; index < SIZE; index++)
    {
      this->elements[index] = e;
    }
  }
  #end if

  ${name} ::
    ${name}(
#for $i in $range(1, $size + 1)
#if $i != $size:
      const ElementType (&e${i}), //!< Element ${i}
#else
      const ElementType (&e${i})
#end if
#end for
    ) :
      Serializable()
  {
#set $k = 0
#for $i in $range(1, $size + 1)
    this->elements[$k] = e${i};
#set $k = $k + 1
#end for
  }

  ${name} ::
    ${name}(const ${name}& other) :
      Serializable()
  {
    for(U32 index = 0; index < SIZE; index++)
    {
      this->elements[index] = other.elements[index];
    }
  }

  // ----------------------------------------------------------------------
  // Public functions
  // ----------------------------------------------------------------------


  ${name}::ElementType& ${name} ::
    operator[](const U32 i)
  {
    FW_ASSERT(i < SIZE);
    return this->elements[i];
  }

  const ${name}::ElementType& ${name} ::
    operator[](const U32 i) const
  {
    FW_ASSERT(i < SIZE);
    return this->elements[i];
  }


  ${name}& ${name} ::
    operator=(const ${name}& other)
  {
    if(this == &other) {
      return *this;
    }

    for(U32 index = 0; index < SIZE; index++) {
      this->elements[index] = other.elements[index];
    }
    return *this;
  }

  ${name}& ${name} ::
    operator=(const ElementType (&a)[SIZE])
  {
    for(U32 index = 0; index < SIZE; index++) {
      this->elements[index] = a[index];
    }
    return *this;
  }

  ${name}& ${name} ::
    operator=(const ElementType& e)
  {
    for(U32 index = 0; index < SIZE; index++) {
      this->elements[index] = e;
    }
    return *this;
  }

  bool ${name} ::
    operator==(const ${name}& other) const
  {
    for (U32 i = 0; i < SIZE; ++i) {
      if (!((*this)[i] == other[i])) {
        return false;
      }
    }
    return true;
  }

  bool ${name} ::
    operator!=(const ${name}& other) const
  {
    return !(*this == other);
  }

\#if FW_ARRAY_TO_STRING  || BUILD_UT

void ${name}::toString(Fw::StringBase& text) const {

    static const char * formatString = "[ "
#for $index in $range(0, $size):
#if $index != $size - 1:
      "${format}, "
#else:
      "${format} ]";
#end if
#end for

#if $typeinfo == "extern":
    // Need to instantiate toString for arrays and serializable types
#for $index in $range(0, $size):
    Fw::String str${index};
    this->elements[$index].toString(str${index});
#end for
#end if

    // declare strings to hold any serializable toString() arguments

    char outputString[FW_ARRAY_TO_STRING_BUFFER_SIZE];
    (void)snprintf(outputString,FW_ARRAY_TO_STRING_BUFFER_SIZE,formatString
#for $index in $range(0, $size):
#if $type == "bool":
      ,this->elements[$index]?"T":"F"
#else if $type == "ENUM":
      ,static_cast<NATIVE_INT_TYPE>(this->elements[$index])
#else if $typeinfo == "extern":
      ,str${index}.toChar()
#else if $type == "string":
      ,this->elements[$index].toChar()
#else:
      ,this->elements[$index]
#end if
#end for ## INDEX
    );
    outputString[FW_ARRAY_TO_STRING_BUFFER_SIZE-1] = 0; // NULL terminate

    text = outputString;
}

\#endif

\#ifdef BUILD_UT
  std::ostream& operator<<(std::ostream& os, const ${name}& obj) {
    Fw::String temp;
    obj.toString(temp);

    os << temp;
    return os;
  }
\#endif

  Fw::SerializeStatus ${name} ::
    serialize(Fw::SerializeBufferBase& buffer) const
  {
    Fw::SerializeStatus status = Fw::FW_SERIALIZE_OK;
    for (U32 i = 0; i < SIZE; ++i) {
      status = buffer.serialize((*this)[i]);
      if (status != Fw::FW_SERIALIZE_OK) {
        return status;
      }
    }
    return status;
  }

  Fw::SerializeStatus ${name} ::
    deserialize(Fw::SerializeBufferBase& buffer)
  {
    Fw::SerializeStatus status = Fw::FW_SERIALIZE_OK;
    for (U32 i = 0; i < SIZE; ++i) {
      status = buffer.deserialize((*this)[i]);
      if (status != Fw::FW_SERIALIZE_OK) {
        return status;
      }
    }
    return status;
  }

#if $namespace_list != None
 #for $namespace in $reversed($namespace_list)
} // end namespace $namespace
 #end for
#end if
