#if $namespace_list != None
 #for $n in $namespace_list:
namespace ${n} {
 #end for
#end if
#for ($memname,$type,$size,$format,$comment,$default) in $mem_list:
#if $type == "string":

    ${name}::${memname}String::${memname}String(const char* src): StringBase() {
        Fw::StringUtils::string_copy(this->m_buf, src, sizeof(this->m_buf));
    }

    ${name}::${memname}String::${memname}String(const Fw::StringBase& src): StringBase() {
        Fw::StringUtils::string_copy(this->m_buf, src.toChar(), sizeof(this->m_buf));
    }

    ${name}::${memname}String::${memname}String(const ${memname}String& src): StringBase() {
        Fw::StringUtils::string_copy(this->m_buf, src.toChar(), sizeof(this->m_buf));
    }

    ${name}::${memname}String::${memname}String(void): StringBase() {
        this->m_buf[0] = 0;
    }

    ${name}::${memname}String& ${name}::${memname}String::operator=(const ${memname}String& other) {
        Fw::StringUtils::string_copy(this->m_buf, other.toChar(), sizeof(this->m_buf));
        return *this;
    }

    ${name}::${memname}String& ${name}::${memname}String::operator=(const StringBase& other) {
        Fw::StringUtils::string_copy(this->m_buf, other.toChar(), sizeof(this->m_buf));
        return *this;
    }

    ${name}::${memname}String& ${name}::${memname}String::operator=(const char* other) {
        Fw::StringUtils::string_copy(this->m_buf, other, sizeof(this->m_buf));
        return *this;
    }

    ${name}::${memname}String::~${memname}String(void) {
    }

    const char* ${name}::${memname}String::toChar(void) const {
        return this->m_buf;
    }

    NATIVE_UINT_TYPE ${name}::${memname}String::getCapacity(void) const {
        return sizeof(this->m_buf);
    }

#end if
#end for
