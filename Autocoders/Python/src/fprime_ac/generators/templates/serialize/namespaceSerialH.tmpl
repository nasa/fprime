#if $namespace_list != None
 #for $n in $namespace_list:
namespace ${n} {
 #end for
#end if
#if $len($enum_type_list) > 0:
#for $e in $enum_type_list:
#set type_name = $e[0][1]
#set enum_list = $e[1]

    typedef enum {
#for $item in $enum_list:
        $item
#end for
        ${type_name}_MAX
    } ${type_name};
#end for
#end if

class ${name} : public Fw::Serializable {

#for ($memname,$type,$array_size,$size,$format,$comment,$default) in $mem_list:
#if $type == "string":

  public:
    class ${memname}String : public Fw::StringBase {
        public:

            enum {
                SERIALIZED_SIZE = ${size} + sizeof(FwBuffSizeType) //!<size of buffer + storage of two size words
            };

            ${memname}String(const char* src); //!< char array constructor
            ${memname}String(const Fw::StringBase& src); //!< string base constructor
            ${memname}String(const ${memname}String& src); //!< string base constructor
            ${memname}String(); //!< default constructor
            ${memname}String& operator=(const ${memname}String& other); //!< assignment operator
            ${memname}String& operator=(const Fw::StringBase& other); //!< other string assignment operator
            ${memname}String& operator=(const char* other); //!< char* assignment operator
            ~${memname}String(); //!< destructor

            const char* toChar() const; //!< retrieves char buffer of string
            NATIVE_UINT_TYPE getCapacity() const ;

        private:

            char m_buf[${size}]; //!< buffer for string storage
    };

#end if
#end for

