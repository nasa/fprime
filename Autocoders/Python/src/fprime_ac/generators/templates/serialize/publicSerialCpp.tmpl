// public methods

${name}::${name}(void): Serializable() {

}

${name}::${name}(const ${name}& src) : Serializable() {
    this->set(${args_mstring});
}

${name}::${name}(const ${name}* src) : Serializable() {
    FW_ASSERT(src);
    this->set(${args_mstring_ptr});
}

${name}::${name}(${args_proto_string}) : Serializable() {
    this->set(${args_string});
}

const ${name}& ${name}::operator=(const ${name}& src) {
    this->set(${args_mstring});
    return src;
}

bool ${name}::operator==(const ${name}& src) const {
    return (
#for ($member,$type,$size,$format,$comment,$typeinfo) in $members:
        (src.m_$member == this->m_$member) &&
#end for
        true);
}

void ${name}::set(${args_proto_string}) {
#for ($member,$type,$size,$format,$comment,$typeinfo) in $members:
#if $size == None or $typeinfo == "string":
    this->m_${member} = ${member};
#else
    for (NATIVE_INT_TYPE _mem = 0; _mem < FW_MIN(${member}Size,${size}); _mem++) {
        this->m_${member}[_mem] = ${member}[_mem];
    }
#end if
#end for
}

#for ($member,$type,$size,$format,$comment,$typeinfo) in $members:
#if $size == None:
${type} ${name}::get${member}(void) {
    return this->m_${member};
#else if $typeinfo == 'string' or $typeinfo == 'extern':
const ${type}& ${name}::get${member}(void) {
    return this->m_${member};
#else
const ${type}* ${name}::get${member}(NATIVE_INT_TYPE& size) {
    size = ${size};
    return this->m_${member};
#end if
}

#end for
#for ($member,$type,$size,$format,$comment,$typeinfo) in $members:
#if $size == None:
void ${name}::set${member}(${type} val) {
    this->m_${member} = val;
}
#else if $typeinfo == 'string' or $typeinfo == 'extern':
void ${name}::set${member}(const ${type}& val) {
    this->m_${member} = val;
}
#else
void ${name}::set${member}(const ${type}* val, NATIVE_INT_TYPE size) {
    for (NATIVE_INT_TYPE _mem = 0; _mem < FW_MIN(size,${size}); _mem++) {
        this->m_${member}[_mem] = val[_mem];
    }
}
#end if
#end for
Fw::SerializeStatus ${name}::serialize(Fw::SerializeBufferBase& buffer) const {
    Fw::SerializeStatus stat;

\#if FW_SERIALIZATION_TYPE_ID
    // serialize type ID
    stat = buffer.serialize((U32)${name}::TYPE_ID);
\#endif

#for ($member,$type,$size,$format,$comment,$typeinfo) in $members:
#if $size == None or $typeinfo == "string":
#if $typeinfo == "enum":
    stat = buffer.serialize((FwEnumStoreType)this->m_${member});
#else
    stat = buffer.serialize(this->m_${member});
#end if
    if (stat != Fw::FW_SERIALIZE_OK) {
        return stat;
    }
#else
    for (NATIVE_INT_TYPE _mem = 0; _mem < ${size}; _mem++) {
        stat = buffer.serialize(this->m_${member}[_mem]);
        if (stat != Fw::FW_SERIALIZE_OK) {
            return stat;
        }
    }
#end if
#end for
    return stat;
}

Fw::SerializeStatus ${name}::deserialize(Fw::SerializeBufferBase& buffer) {
    Fw::SerializeStatus stat;

\#if FW_SERIALIZATION_TYPE_ID
    U32 typeId;

    stat = buffer.deserialize(typeId);
    if (stat != Fw::FW_SERIALIZE_OK) {
        return stat;
    }

    if (typeId != ${name}::TYPE_ID) {
        return Fw::FW_DESERIALIZE_TYPE_MISMATCH;
    }
\#endif

#for ($member,$type,$size,$format,$comment,$typeinfo) in $members:
#if $size == None or $typeinfo == "string":
#if $typeinfo == "enum"
    FwEnumStoreType int${member} = 0;
    stat = buffer.deserialize(int${member});
    this->m_${member} = static_cast<$type>(int${member});
#else
    stat = buffer.deserialize(this->m_${member});
#end if
    if (stat != Fw::FW_SERIALIZE_OK) {
        return stat;
    }
#else
    for (NATIVE_INT_TYPE _mem = 0; _mem < ${size}; _mem++) {
        stat = buffer.deserialize(this->m_${member}[_mem]);
        if (stat != Fw::FW_SERIALIZE_OK) {
            return stat;
        }
    }
#end if
#end for
    return stat;
}

\#if FW_SERIALIZABLE_TO_STRING  || BUILD_UT

void ${name}::toString(Fw::StringBase& text) const {

    static const char * formatString =
       "("
#for ($member,$type,$size,$format,$comment,$typeinfo) in $members[0:-1]:
#if $size != None and typeinfo != "string":
       "$member = "
#for $elem in range(0,int($size)-1):
       "[$format]"
#end for
       "[$format] "
#else
       "$member = $format, "
#end if
#end for
#if $members[-1][2] != None and $members[-1][5] != "string":
       "$members[-1][0] = "
#for $elem in range(0,int($members[-1][2])-1):
       "[$members[-1][3]]"
#end for
       "[$members[-1][3]] "
#else
       "$members[-1][0] = $members[-1][3]"
#end if
       ")";

    // declare strings to hold any serializable toString() arguments

#for ($member,$type,$size,$format,$comment,$typeinfo) in $members:
#if $typeinfo == "extern":

    Fw::EightyCharString ${member}Str;
    this->m_${member}.toString(${member}Str);
#end if
#end for

    char outputString[FW_SERIALIZABLE_TO_STRING_BUFFER_SIZE];
    (void)snprintf(outputString,FW_SERIALIZABLE_TO_STRING_BUFFER_SIZE,formatString
#for ($member,$type,$size,$format,$comment,$typeinfo) in $members:
#if $size != None and $typeinfo != "string":
#for $elem in range(0,int($size)):
#if $type == "bool":
       ,this->m_${member}[$elem]?"T":"F"
#else if $type == "enum":
       ,(NATIVE_INT_TYPE)this->m_${member}[$elem]
#else:
       ,this->m_${member}[$elem]
#end if
#end for ## for each element of the array
#else: ## not array
#if $type == "bool":
       ,this->m_${member}?"T":"F"
#else if $type == "enum":
       ,(NATIVE_INT_TYPE)this->m_${member}
#else if $typeinfo == "string":
       ,this->m_${member}.toChar()
#else if $typeinfo == "extern":
       ,${member}Str.toChar()
#else:
       ,this->m_$member
#end if
#end if ## not array
#end for ## each member
    );
    outputString[FW_SERIALIZABLE_TO_STRING_BUFFER_SIZE-1] = 0; // NULL terminate

    text = outputString;
}

\#endif

\#ifdef BUILD_UT
    std::ostream& operator<<(std::ostream& os, const ${name}& obj) {
        Fw::EightyCharString str;
        obj.toString(str);
        os << str.toChar();
        return os;
    }
\#endif
