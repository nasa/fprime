public:

    enum {
        SERIALIZED_SIZE =
#for tname,type,size,format,comment,typeinfo in $members[0:-1]:
#if $typeinfo == 'string' or $typeinfo == 'extern':
        ${type}::SERIALIZED_SIZE +
#else if $typeinfo == 'enum':
        sizeof(FwEnumStoreType) +
#else if $size == None:
        sizeof(${type}) +
#else
        sizeof(${type})*${size} +
#end if
#end for
#set ($tname,$type,$size,$format,$comment,$typeinfo) = $members[-1]
#if $typeinfo == 'string' or $typeinfo == 'extern':
        ${type}::SERIALIZED_SIZE
#else if $typeinfo == 'enum':
        sizeof(FwEnumStoreType)
#else if $size == None:
        sizeof($type)
#else
        sizeof($type)*$size
#end if
    }; //!< serializable size of ${name}

    ${name}(void); //!< Default constructor
    ${name}(const ${name}* src); //!< pointer copy constructor
    ${name}(const ${name}& src); //!< reference copy constructor
    ${name}($args_proto); //!< constructor with arguments
#if $args_proto_scalar_init:
    ${name}($args_proto_scalar_init); //!< constructor with arguments with scalars for array arguments
#end if
    const ${name}& operator=(const ${name}& src); //!< equal operator
    bool operator==(const ${name}& src) const; //!< equality operator
#ifdef BUILD_UT
    // to support GoogleTest framework in unit tests
    friend std::ostream& operator<<(std::ostream& os, const ${name}& obj);
#endif

    void set($args_proto); //!< set values

#for name,type,size,format,comment,typeinfo in $members:
#if $size == None:
    ${type} get${name}(void) const; //!< get member $name
#else if $typeinfo == 'string' or $typeinfo == 'extern':
    const ${type}& get${name}(void) const; //!< get member $name
#else
    const ${type}* get${name}(NATIVE_INT_TYPE& size) const; //!< get member $name
#end if
#end for

#for name,type,size,format,comment,typeinfo in $members:
#if $size == None:
    void set${name}(${type} val); //!< set member $name
#else if $typeinfo == 'string' or $typeinfo == 'extern':
    void set${name}(const ${type}& val); //!< set member $name
#else
    void set${name}(const ${type}* val, NATIVE_INT_TYPE size); //!< set member $name
#end if
#end for


    Fw::SerializeStatus serialize(Fw::SerializeBufferBase& buffer) const; //!< serialization function
    Fw::SerializeStatus deserialize(Fw::SerializeBufferBase& buffer); //!< deserialization function
\#if FW_SERIALIZABLE_TO_STRING || BUILD_UT
    void toString(Fw::StringBase& text) const; //!< generate text from serializable
\#endif
