// ======================================================================
// \title  ${name}/test/ut/GTestBase.cpp
// \author Auto-generated
// \brief  cpp file for ${name} component Google Test harness base class
//
// \copyright
// Copyright 2009-2015, by the California Institute of Technology.
// ALL RIGHTS RESERVED.  United States Government Sponsorship
// acknowledged.
//
// ======================================================================

\#include "GTestBase.hpp"

#if $namespace_list != None
 #for $namespace in $namespace_list
namespace ${namespace} {
 #end for
#end if

  // ----------------------------------------------------------------------
  // Construction and destruction
  // ----------------------------------------------------------------------

  $gtest_base ::
    ${gtest_base}(
\#if FW_OBJECT_NAMES == 1
$emit_cpp_params([ $param_compName, $param_maxHistorySize ])
\#else
$emit_cpp_params([ $param_maxHistorySize ])
\#endif
    ) :
        ${tester_base} (
\#if FW_OBJECT_NAMES == 1
            compName,
\#endif
            maxHistorySize
        )
  {

  }

  $gtest_base ::
    ~${gtest_base}(void)
  {

  }

#if $has_commands
  // ----------------------------------------------------------------------
  // Commands
  // ----------------------------------------------------------------------

  void $gtest_base ::
    assertCmdResponse_size(
$emit_cpp_params($params_assert_size)
    ) const
  {
    ASSERT_EQ((unsigned long) size, this->cmdResponseHistory->size())
      $failure_message
      $LTLT "  Value:    Size of command response history\n"
      $LTLT "  Expected: " $LTLT size $LTLT "\n"
      $LTLT "  Actual:   " $LTLT this->cmdResponseHistory->size() $LTLT "\n";
  }

  void $gtest_base ::
    assertCmdResponse(
$emit_cpp_params($params_assert_cmd_response)
    )
    const
  {
    ASSERT_LT(__index, this->cmdResponseHistory->size())
      $failure_message
      $LTLT "  Value:    Index into command response history\n"
      $LTLT "  Expected: Less than size of command response history ("
      $LTLT this->cmdResponseHistory->size() $LTLT ")\n"
      $LTLT "  Actual:   " $LTLT __index $LTLT "\n";
    const CmdResponse& e = this->cmdResponseHistory->at(__index);
    ASSERT_EQ(opCode, e.opCode)
      $failure_message
      $LTLT "  Value:    Opcode at index "
      $LTLT __index
      $LTLT " in command response history\n"
      $LTLT "  Expected: " $LTLT opCode $LTLT "\n"
      $LTLT "  Actual:   " $LTLT e.opCode $LTLT "\n";
    ASSERT_EQ(cmdSeq, e.cmdSeq)
      $failure_message
      $LTLT "  Value:    Command sequence number at index "
      $LTLT __index
      $LTLT " in command response history\n"
      $LTLT "  Expected: " $LTLT cmdSeq $LTLT "\n"
      $LTLT "  Actual:   " $LTLT e.cmdSeq $LTLT "\n";
    ASSERT_EQ(response, e.response)
      $failure_message
      $LTLT "  Value:    Command response at index "
      $LTLT __index
      $LTLT " in command response history\n"
      $LTLT "  Expected: " $LTLT response $LTLT "\n"
      $LTLT "  Actual:   " $LTLT e.response $LTLT "\n";
  }

#end if
#if $has_telemetry
  // ----------------------------------------------------------------------
  // Telemetry
  // ----------------------------------------------------------------------

  void $gtest_base ::
    assertTlm_size(
$emit_cpp_params($params_assert_size)
    ) const
  {
    ASSERT_EQ(size, this->tlmSize)
      $failure_message
      $LTLT "  Value:    Total size of all telemetry histories\n"
      $LTLT "  Expected: " $LTLT size $LTLT "\n"
      $LTLT "  Actual:   " $LTLT this->tlmSize $LTLT "\n";
  }

  #for $id, $channel_name, $type, $size, $update, $comment, $typeinfo in $channels:
  // ----------------------------------------------------------------------
  // Channel: ${channel_name}
  // ----------------------------------------------------------------------

  void $gtest_base ::
    assertTlm_${channel_name}_size(
$emit_cpp_params($params_assert_size)
    ) const
  {
    ASSERT_EQ(this->tlmHistory_${channel_name}->size(), size)
      $failure_message
      $LTLT "  Value:    Size of history for telemetry channel $channel_name\n"
      $LTLT "  Expected: " $LTLT size $LTLT "\n"
      $LTLT "  Actual:   " $LTLT this->tlmHistory_${channel_name}->size() $LTLT "\n";
  }

    #set $param_val = $get_param_val_Tlm($type, $typeinfo)
  void $gtest_base ::
    assertTlm_${channel_name}(
$emit_cpp_params([ $param_fileName, $param_lineNumber, $param_index, $param_val ])
    )
    const
  {
    ASSERT_LT(__index, this->tlmHistory_${channel_name}->size())
      $failure_message
      $LTLT "  Value:    Index into history of telemetry channel ${channel_name}\n"
      $LTLT "  Expected: Less than size of history ("
      $LTLT this->tlmHistory_${channel_name}->size() $LTLT ")\n"
      $LTLT "  Actual:   " $LTLT __index $LTLT "\n";
    const TlmEntry_${channel_name}& e =
      this->tlmHistory_${channel_name}->at(__index);
    #if $type == "string":
    ASSERT_STREQ(val, e.arg.toChar())
    #else
    ASSERT_EQ(val, e.arg)
    #end if
      $failure_message
      $LTLT "  Value:    Value at index "
      $LTLT __index
      $LTLT " on telemetry channel ${channel_name}\n"
      $LTLT "  Expected: " $LTLT val $LTLT "\n"
      $LTLT "  Actual:   " $LTLT e.arg $LTLT "\n";
  }

  #end for
#end if
#if $has_events
  // ----------------------------------------------------------------------
  // Events
  // ----------------------------------------------------------------------

  void $gtest_base ::
    assertEvents_size(
$emit_cpp_params($params_assert_size)
    ) const
  {
    ASSERT_EQ(size, this->eventsSize)
      $failure_message
      $LTLT "  Value:    Total size of all event histories\n"
      $LTLT "  Expected: " $LTLT size $LTLT "\n"
      $LTLT "  Actual:   " $LTLT this->eventsSize $LTLT "\n";
  }

  #for $id, $event_name, $severity, $format_string, $throttle, $comment in $events:
    #set $params = $get_event_params($event_name)
  // ----------------------------------------------------------------------
  // Event: ${event_name}
  // ----------------------------------------------------------------------

  void $gtest_base ::
    assertEvents_${event_name}_size(
$emit_cpp_params($params_assert_size)
    ) const
  {
    #if len($params) > 0:
    ASSERT_EQ(size, this->eventHistory_${event_name}->size())
    #else:
    ASSERT_EQ(size, this->eventsSize_${event_name})
    #end if
      $failure_message
      $LTLT "  Value:    Size of history for event $event_name\n"
      $LTLT "  Expected: " $LTLT size $LTLT "\n"
    #if len($params) > 0:
      $LTLT "  Actual:   " $LTLT this->eventHistory_${event_name}->size() $LTLT "\n";
    #else:
      $LTLT "  Actual:   " $LTLT this->eventsSize_${event_name} $LTLT "\n";
    #end if
  }

    #if len($params) > 0:
  void $gtest_base ::
    assertEvents_${event_name}(
$emit_cpp_params($params_assert_event + $params)
    ) const
  {
    ASSERT_GT(this->eventHistory_${event_name}->size(), __index)
      $failure_message
      $LTLT "  Value:    Index into history of event ${event_name}\n"
      $LTLT "  Expected: Less than size of history ("
      $LTLT this->eventHistory_${event_name}->size() $LTLT ")\n"
      $LTLT "  Actual:   " $LTLT __index $LTLT "\n";
    const EventEntry_${event_name}& e =
      this->eventHistory_${event_name}->at(__index);
      #for $param_name, $param_type, $param_comment, $param_typeinfo in $params
        #if $param_typeinfo == "string":
    ASSERT_STREQ(${param_name}, e.${param_name}.toChar())
        #else:
    ASSERT_EQ(${param_name}, e.${param_name})
        #end if
      $failure_message
      $LTLT "  Value:    Value of argument $param_name at index "
      $LTLT __index
      $LTLT " in history of event ${event_name}\n"
      $LTLT "  Expected: " $LTLT $param_name $LTLT "\n"
        #if $param_typeinfo == "string":
      $LTLT "  Actual:   " $LTLT e.${param_name}.toChar() $LTLT "\n";
        #else:
      $LTLT "  Actual:   " $LTLT e.${param_name} $LTLT "\n";
        #end if
      #end for
  }

    #end if
  #end for
#end if
#if len($typed_user_output_ports) > 0:
  // ----------------------------------------------------------------------
  // From ports
  // ----------------------------------------------------------------------

  void $gtest_base ::
    assertFromPortHistory_size(
$emit_cpp_params($params_assert_size)
    ) const
  {
    ASSERT_EQ(size, this->fromPortHistorySize)
      $failure_message
      $LTLT "  Value:    Total size of all from port histories\n"
      $LTLT "  Expected: " $LTLT size $LTLT "\n"
      $LTLT "  Actual:   " $LTLT this->fromPortHistorySize $LTLT "\n";
  }

  #for $instance, $type, $sync, $priority, $role, $max_num in $typed_user_output_ports:
    #set $params = $port_params[$instance]
  // ----------------------------------------------------------------------
  // From port: $instance
  // ----------------------------------------------------------------------

  void $gtest_base ::
    assert_from_${instance}_size(
$emit_cpp_params($params_assert_size)
    ) const
  {
    #if len($params) > 0:
    ASSERT_EQ(size, this->fromPortHistory_${instance}->size())
    #else:
    ASSERT_EQ(size, this->fromPortHistorySize_${instance})
    #end if
      $failure_message
      $LTLT "  Value:    Size of history for from_$instance\n"
      $LTLT "  Expected: " $LTLT size $LTLT "\n"
    #if len($params) > 0:
      $LTLT "  Actual:   " $LTLT this->fromPortHistory_${instance}->size() $LTLT "\n";
    #else:
      $LTLT "  Actual:   " $LTLT this->fromPortHistorySize_${instance} $LTLT "\n";
    #end if
  }

  #end for
#end if
#if $namespace_list != None
 #for $namespace in $reversed($namespace_list)
} // end namespace $namespace
 #end for
#end if
