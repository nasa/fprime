    Input${name}Port::Input${name}Port() :
        Fw::InputPortBase(),
        m_func(nullptr) {
    }

    void Input${name}Port::init() {
        Fw::InputPortBase::init();
    }

    void Input${name}Port::addCallComp(Fw::PassiveComponentBase* callComp, CompFuncPtr funcPtr) {
        FW_ASSERT(callComp);
        FW_ASSERT(funcPtr);

        this->m_comp = callComp;
        this->m_func = funcPtr;
        this->m_connObj = callComp;
    }

    // call virtual logging function for component
    ${return_type}Input${name}Port::invoke(${args_proto_string}) {

\#if FW_PORT_TRACING == 1
        this->trace();
\#endif
        FW_ASSERT(this->m_comp);
        FW_ASSERT(this->m_func);
#if $return_type[:4] == "void":
#if $args_string == "":
        this->m_func(this->m_comp, this->m_portNum);
#else:
        this->m_func(this->m_comp, this->m_portNum, ${args_string});
#end if
#else:
#if $args_string == "":
        return this->m_func(this->m_comp, this->m_portNum);
#else:
        return this->m_func(this->m_comp, this->m_portNum, ${args_string});
#end if
#end if
    }

