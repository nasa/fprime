#if $namespace_list != None
 #for $namespace in $namespace_list
namespace ${namespace} {
 #end for
#end if
##
## Generate optional enum typedef's here...
##
#if $len($enum_type_list) > 0:
#for $e in $enum_type_list:
#set type_name = $e[0][1]
#set enum_list = $e[1]

    typedef enum {
#for $item in $enum_list:
        $item
#end for
        ${type_name}_MAX
    } ${type_name}; //!< ${type_name} enumeration argument
#end for
#end if
#for ($argname,$type,$modifier,$size,$comment) in $arg_list:
#if $type == "string":

    class ${argname}String : public Fw::StringBase {
        public:

            enum {
                SERIALIZED_SIZE = ${size} + sizeof(FwBuffSizeType) //!< Serialized size of ${argname}String
            };

            ${argname}String(const char* src); //!< char buffer constructor
            ${argname}String(const Fw::StringBase& src); //!< other string constructor
            ${argname}String(const ${argname}String& src); //!< same type string constructor
            ${argname}String(); //!< default constructor
            ${argname}String& operator=(const ${argname}String& other); //!< assignment operator
            ${argname}String& operator=(const Fw::StringBase& other); //!< other string assignment operator
            ${argname}String& operator=(const char* other); //!< char* assignment operator
            ~${argname}String(); //!< destructor

            const char* toChar() const; //!< return internal buffer
            NATIVE_UINT_TYPE getCapacity() const;

        private:

            char m_buf[${size}]; //!< buffer for string
    };

#end if
#if $type == "buffer":

    class ${argname}Buffer : public Fw::SerializeBufferBase {
        public:

            enum {
                SERIALIZED_SIZE = ${size} + sizeof(FwBuffSizeType) //!< serialized size of ${argname}Buffer
            };

            ${argname}Buffer(const U8 *args, NATIVE_UINT_TYPE size); //!< constructor with other byte array
            ${argname}Buffer(); //!< default constructor
            ${argname}Buffer(const ${argname}Buffer& other); //!< constructor with other ${argname}Buffer instance
            virtual ~${argname}Buffer(); //!< destructor
            const ${argname}Buffer& operator=(const ${argname}Buffer& other); //!< equal operator

            NATIVE_UINT_TYPE getBuffCapacity() const; //!< returns capacity, not current size, of buffer
            U8* getBuffAddr(); //!< returns address of internal buffer
            const U8* getBuffAddr() const; //!< returns address of internal buffer, const version

        private:
            U8 m_data[${size}]; //!< data buffer
    };

#end if
#end for

    /// Input $name port description
    /// $desc

    class Input${name}Port : public Fw::InputPortBase  {
