#if $namespace_list != None
 #for $n in $namespace_list:
namespace ${n} {
 #end for
#end if

#for ($argname,$type,$modifier,$size,$comment) in $arg_list:
#if $type == "string":

    ${argname}String::${argname}String(const char* src): StringBase() {
        this->copyBuff(src,this->getCapacity());
    }

    ${argname}String::${argname}String(const Fw::StringBase& src): StringBase() {
        this->copyBuff(src.toChar(),this->getCapacity());
    }

    ${argname}String::${argname}String(const ${argname}String& src): StringBase() {
        this->copyBuff(src.toChar(),this->getCapacity());
    }

    ${argname}String::${argname}String(void): StringBase() {
        this->m_buf[0] = 0;
    }

    ${argname}String::~${argname}String(void) {
    }

    NATIVE_UINT_TYPE ${argname}String::length(void) const {
        return (NATIVE_UINT_TYPE)strnlen(this->m_buf,sizeof(this->m_buf));
    }

    const char* ${argname}String::toChar(void) const {
        return this->m_buf;
    }

    Fw::SerializeStatus ${argname}String::serialize(Fw::SerializeBufferBase& buffer) const {
        NATIVE_UINT_TYPE strSize = strnlen(this->m_buf,sizeof(this->m_buf));
        // serialize string as buffer
        return buffer.serialize((U8*)this->m_buf,strSize);
    }

    Fw::SerializeStatus ${argname}String::deserialize(Fw::SerializeBufferBase& buffer) {
        NATIVE_UINT_TYPE maxSize = sizeof(this->m_buf);
        // deserialize string
        Fw::SerializeStatus stat = buffer.deserialize((U8*)this->m_buf,maxSize);
        // make sure it is null-terminated
        this->terminate(maxSize);

        return stat;
    }

    NATIVE_UINT_TYPE ${argname}String::getCapacity(void) const {
        return sizeof(this->m_buf);
    }

    const ${argname}String& ${argname}String::operator=(const ${argname}String& other) {
        this->copyBuff(other.m_buf,this->getCapacity());
        return *this;
    }

    void ${argname}String::terminate(NATIVE_UINT_TYPE size) {
        // null terminate the string
        this->m_buf[size < sizeof(this->m_buf)?size:sizeof(this->m_buf)-1] = 0;
    }

#end if
#if $type == "buffer":

    ${argname}Buffer::${argname}Buffer(const U8 *args, NATIVE_UINT_TYPE size) {
        Fw::SerializeBufferBase::setBuff(args,size);
    }

    ${argname}Buffer::${argname}Buffer() : Fw::SerializeBufferBase() {
    }

    ${argname}Buffer::~${argname}Buffer() {
    }

    ${argname}Buffer::${argname}Buffer(const ${argname}Buffer& other) : Fw::SerializeBufferBase() {
        Fw::SerializeBufferBase::setBuff(other.m_data,other.getBuffLength());
    }

    const ${argname}Buffer& ${argname}Buffer::operator=(const ${argname}Buffer& other) {
        Fw::SerializeBufferBase::setBuff(other.m_data,other.getBuffLength());
        return other;
    }

    NATIVE_UINT_TYPE ${argname}Buffer::getBuffCapacity(void) const {
        return sizeof(this->m_data);
    }

    const U8* ${argname}Buffer::getBuffAddr(void) const {
        return this->m_data;
    }

    U8* ${argname}Buffer::getBuffAddr(void) {
        return this->m_data;
    }

#end if
#end for

    namespace {

        class ${name}PortBuffer : public Fw::SerializeBufferBase {

            public:
                NATIVE_UINT_TYPE getBuffCapacity(void) const {
                    return sizeof(m_buff);
                }

                U8* getBuffAddr(void) {
                    return m_buff;
                }

                const U8* getBuffAddr(void) const {
                    return m_buff;
                }

        private:

            U8 m_buff[Input${name}Port::SERIALIZED_SIZE];

        };

    }
