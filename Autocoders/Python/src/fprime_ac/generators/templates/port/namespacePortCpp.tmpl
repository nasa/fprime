#if $namespace_list != None
 #for $n in $namespace_list:
namespace ${n} {
 #end for
#end if

#for ($argname,$type,$modifier,$size,$comment) in $arg_list:
#if $type == "string":

    ${argname}String::${argname}String(const char* src): StringBase() {
        Fw::StringUtils::string_copy(this->m_buf, src, sizeof(this->m_buf));
    }

    ${argname}String::${argname}String(const Fw::StringBase& src): StringBase() {
         Fw::StringUtils::string_copy(this->m_buf, src.toChar(), sizeof(this->m_buf));
    }

    ${argname}String::${argname}String(const ${argname}String& src): StringBase() {
         Fw::StringUtils::string_copy(this->m_buf, src.toChar(), sizeof(this->m_buf));
    }

    ${argname}String::${argname}String(): StringBase() {
        this->m_buf[0] = 0;
    }

    ${argname}String& ${argname}String::operator=(const ${argname}String& other) {
        if(this == &other) {
            return *this;
        }

        Fw::StringUtils::string_copy(this->m_buf, other.toChar(), sizeof(this->m_buf));
        return *this;
    }

    ${argname}String& ${argname}String::operator=(const StringBase& other) {
        if(this == &other) {
            return *this;
        }

        Fw::StringUtils::string_copy(this->m_buf, other.toChar(), sizeof(this->m_buf));
        return *this;
    }

    ${argname}String& ${argname}String::operator=(const char* other) {
        Fw::StringUtils::string_copy(this->m_buf, other, sizeof(this->m_buf));
        return *this;
    }

    ${argname}String::~${argname}String() {
    }

    const char* ${argname}String::toChar() const {
        return this->m_buf;
    }

    NATIVE_UINT_TYPE ${argname}String::getCapacity() const {
        return sizeof(this->m_buf);
    }

#end if
#if $type == "buffer":

    ${argname}Buffer::${argname}Buffer(const U8 *args, NATIVE_UINT_TYPE size) {
        Fw::SerializeBufferBase::setBuff(args,size);
    }

    ${argname}Buffer::${argname}Buffer() : Fw::SerializeBufferBase() {
    }

    ${argname}Buffer::~${argname}Buffer() {
    }

    ${argname}Buffer::${argname}Buffer(const ${argname}Buffer& other) : Fw::SerializeBufferBase() {
        Fw::SerializeBufferBase::setBuff(other.m_data,other.getBuffLength());
    }

    const ${argname}Buffer& ${argname}Buffer::operator=(const ${argname}Buffer& other) {
        if(this == &other) {
            return *this;
        }

        Fw::SerializeBufferBase::setBuff(other.m_data,other.getBuffLength());
        return other;
    }

    NATIVE_UINT_TYPE ${argname}Buffer::getBuffCapacity() const {
        return sizeof(this->m_data);
    }

    const U8* ${argname}Buffer::getBuffAddr() const {
        return this->m_data;
    }

    U8* ${argname}Buffer::getBuffAddr() {
        return this->m_data;
    }

#end if
#end for

    namespace {

        class ${name}PortBuffer : public Fw::SerializeBufferBase {

            public:
                NATIVE_UINT_TYPE getBuffCapacity() const {
                    return Input${name}Port::SERIALIZED_SIZE;
                }

                U8* getBuffAddr() {
#if len($arg_list) > 0:
                    return m_buff;
#else
                    return nullptr;
#end if
                }

                const U8* getBuffAddr() const {
#if len($arg_list) > 0:
                    return m_buff;
#else
                    return nullptr;
#end if
                }

        private:

#if len($arg_list) > 0:
            U8 m_buff[Input${name}Port::SERIALIZED_SIZE];
#end if

        };

    }
